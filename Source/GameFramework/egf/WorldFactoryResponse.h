// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not
// be copied or disclosed except in accordance with the terms of that
// agreement.
//
//      Copyright (c) 1996-2009 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Calabasas, CA 91302
// http://www.emergent.net

#pragma once
#ifndef EE_WORLDFACTORYRESPONSE_H
#define EE_WORLDFACTORYRESPONSE_H

#include <efd/GenericAssetLoadResponse.h>
#include <egf/egfMessageIDs.h>
#include <egf/FlatModelFactoryResponse.h>

// forward declarations
namespace efd
{
    class Category;
    class utf8string;
}

namespace egf
{

/**
    Response generated by the WorldFactory to reply to a WorldFactoryRequest. The
    WorldFactoryResponse contains the original request URN and responseCategory. It includes a
    result indicating the status of the load. If the load was successful, the WorldFactoryResponse
    message contains the size and contents of the block file, along with all of the flat model
    files required by the world.
 */
class EE_EGF_ENTRY WorldFactoryResponse : public efd::GenericAssetLoadResponse
{
    /// @cond EMERGENT_INTERNAL
    EE_DECLARE_CLASS1(
        WorldFactoryResponse,
        efd::kMSGID_WorldFactoryResponse,
        efd::GenericAssetLoadResponse);
    /// @endcond

public:
    /// Map of model name to FlatModelPtr instance.
    typedef efd::set<egf::FlatModelFactoryResponsePtr> FlatModelResponseSet;

    /// @name Construction and Destruction
    //@{

    /// Default constructor
    WorldFactoryResponse();

    /**
        Construct a new WorldFactoryResponse. Each response contains the request URN and
        response category and a result. Successful loads will have a non-zero block file size,
        block file data, and a set of FlatModel instances.

        @param urn original request URN.
        @param responseCategory original request response category.
        @param result result of the load.
        @param assetPath Fully qualified path to the xblock file.
        @param isReload hint to the factory indicating this is a reload.
        @param worldFileSize the size of the block file data, in bytes.
        @param worldFileData contents of the block file.
        @param modelSet Set of FlatModelFactoryResponse messages.
    */
    WorldFactoryResponse(
        const efd::utf8string& urn,
        const efd::Category& responseCategory,
        efd::AssetLoadResponse::AssetLoadResult result,
        const efd::utf8string& assetPath = "",
        bool isReload = false,
        efd::UInt32 worldFileSize = 0,
        char* worldFileData = 0,
        FlatModelResponseSet modelSet = FlatModelResponseSet());

    //@}

    /// @name Getters and Setters
    //@{

    /**
        Get the FlatModel set associated with this response.
        @return FlatModelNameToPtrMap Set of flat models needed by the world.
    */
    const FlatModelResponseSet& GetFlatModels() const;

    /**
        Add a new FlatModel to our set.

        @param flatModelResponse Responses message containing the flat model information.
    */
    void AddFlatModel(egf::FlatModelFactoryResponse* flatModelResponse);

    //@}

protected:
    /// Set of flat model factory responses for flat models required by this world.
    FlatModelResponseSet m_flatModels;
};

/// A SmartPointer for the WorldFactoryResponse class
typedef efd::SmartPointer<WorldFactoryResponse> WorldFactoryResponsePtr;

} // end namespace egf

#endif // EE_WORLDFACTORYRESPONSE_H
