// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not
// be copied or disclosed except in accordance with the terms of that
// agreement.
//
//      Copyright (c) 1996-2009 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Calabasas, CA 91302
// http://www.emergent.net

#ifndef NISCENEGRAPHUPDATEOBJECTID_H
#define NISCENEGRAPHUPDATEOBJECTID_H

#include "NiSceneGraphUpdateServiceLibType.h"

#include <NiUniversalTypes.h>
#include <NiMemObject.h>
#include <NiBitfield.h>

/**
    Class that acts as a unique identifier for objects replicated by NiSceneGraphUpdate
*/
class NISCENEGRAPHUPDATESERVICE_ENTRY NiSceneGraphUpdateObjectId
{
public:

    /// Initialize object
    inline NiSceneGraphUpdateObjectId();

    /**
        Initialize object

        @param uiId Integer representation of ID and instance (can be retrieved with NiUInt32
        cast operator)
    */
    inline NiSceneGraphUpdateObjectId(const NiUInt32 uiId);

    /**
        Initialize object

        @param uiInstanceId Editor instance identifier
        @param uiObjectId Integer identifier generated by editor
    */
    inline NiSceneGraphUpdateObjectId(const NiUInt16 uiInstanceId, const NiUInt16 uiObjectId);

    /**
        Initialize object

        @param kId Integer identifier generated by editor
    */
    inline NiSceneGraphUpdateObjectId(const NiSceneGraphUpdateObjectId& kId);

    /// Destroy object
    inline ~NiSceneGraphUpdateObjectId();

    /// Returns the editor instance identifier
    inline NiUInt16 GetInstanceId() const;

    /// Returns object identifier
    inline NiUInt16 GetObjectId() const;

    /// Assign instance identifier
    /// @param uiInstanceId Editor instance identifier
    inline void SetInstanceId(const NiUInt16 uiInstanceId);

    /// Assign object identifier
    /// @param uiObjectId Integer identifier generated by editor
    inline void SetObjectId(const NiUInt16 uiObjectId);

    /// Assign ID of object on the right hand side to this object
    /// @param kOtherId Object on the right hand side
    inline NiSceneGraphUpdateObjectId& operator = (const NiSceneGraphUpdateObjectId& kOtherId);

    /// Return true if the objects have the same ID
    /// @param kOtherId Object on the right hand side
    inline bool operator == (const NiSceneGraphUpdateObjectId& kOtherId) const;

    /// Return true if the objects do not have the same ID
    /// @param kOtherId Object on the right hand side
    inline bool operator != (const NiSceneGraphUpdateObjectId& kOtherId) const;

    /// Return integer representation of the ID
    inline operator NiUInt32() const;

private:

    NiUInt16 m_usInstanceId;   // Unique identifier for this instance
    NiUInt16 m_usObjectId;     // Unique identifier for this object

public:
    static const NiSceneGraphUpdateObjectId NULL_OBJECT_ID;
};

#include "NiSceneGraphUpdateObjectId.inl"

#endif // #ifndef NISCENEGRAPHUPDATEOBJECT_H