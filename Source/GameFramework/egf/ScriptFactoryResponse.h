// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not
// be copied or disclosed except in accordance with the terms of that
// agreement.
//
//      Copyright (c) 1996-2009 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Calabasas, CA 91302
// http://www.emergent.net

#pragma once
#ifndef EE_SCRIPTFACTORYRESPONSE_H
#define EE_SCRIPTFACTORYRESPONSE_H

#include <efd/AssetLoadResponse.h>
#include <egf/egfMessageIDs.h>
#include <egf/egfLibType.h>

namespace egf
{

/**
    Response generated by the ScriptFactory to reply to a ScriptFactoryRequest. The
    ScriptFactoryResponse contains the original request URN and responseCategory. It includes a
    result indicating the status of the load. If the load was successful, the ScriptFactoryResponse
    message contains the size and contents of the script file, along with all of the other script
    files required by the script.
 */
class EE_EGF_ENTRY ScriptFactoryResponse : public efd::AssetLoadResponse
{
    /// @cond EMERGENT_INTERNAL
    EE_DECLARE_CLASS1(
        ScriptFactoryResponse,
        efd::kMSGID_ScriptFactoryResponse,
        efd::AssetLoadResponse);
    /// @endcond

public:
    /// Contents of a dependent script file
    struct ScriptContent
    {
        // Name of the script.
        efd::utf8string m_name;

        // contents of the script file.
        efd::utf8string m_data;
    };

    /// List of scripts. Dependencies are listed in breadth first order.
    typedef efd::list<ScriptContent> ScriptContentList;

    /// @name Construction and Destruction
    //@{

    /// Default constructor
    ScriptFactoryResponse();

    /**
        Construct a new ScriptFactoryResponse. Each response contains the request URN and
        response category and a result. Successful loads will have at least one ScriptContent
        for the request script, and zero or more additional ScriptContent for dependent
        scripts.

        @param urn original request URN.
        @param scriptName Name of the script, not including extension.
        @param responseCategory original request response category.
        @param result result of the load.
        @param assetPath Fully qualified path to the asset, if available.
        @param isReload hint to the factory indicating this is a reload.
        @param scriptList Contents of script files, listed in breadth first order. The last element
            in this list is the requested script. Elements [0 to n-1] are dependent scripts.
    */
    ScriptFactoryResponse(
        const efd::utf8string& urn,
        const efd::utf8string& scriptName,
        const efd::Category& responseCategory,
        efd::AssetLoadResponse::AssetLoadResult result,
        const efd::utf8string& assetPath = "",
        bool isReload = false,
        const ScriptContentList& scriptList = ScriptContentList());

    /// Cleanup any resources
    ~ScriptFactoryResponse();

    //@}

    /// @name Getters and Setters
    //@{

    /**
        Get the Dependent script map associated with this response.
        @return ScriptNameToContentMap map of script name to file contents.
    */
    const ScriptContentList& GetScripts() const;

    /**
        Add a new Script to the end of the script list.

        @param scriptName The name of the script file.
        @param scriptData The contents of the script file.
    */
    void AddScript(const efd::utf8string& scriptName, const efd::utf8string& scriptData);

    /**
        Get the name of the script.
        @return utf8string script name.
    */
    const efd::utf8string& GetScriptName() const;

    //@}

protected:
    // Scripts needed by the request, listed in breadth first order. The last element of this
    // list is the requested script. All other elements are dependencies.
    ScriptContentList m_scriptList;

    // name of the script
    efd::utf8string m_scriptName;
};

typedef efd::SmartPointer<ScriptFactoryResponse> ScriptFactoryResponsePtr;

} // end namespace egf

#endif // EE_SCRIPTFACTORYRESPONSE_H
