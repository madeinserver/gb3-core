// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not
// be copied or disclosed except in accordance with the terms of that
// agreement.
//
//      Copyright (c) 1996-2009 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Calabasas, CA 91302
// http://www.emergent.net


#pragma once
#ifndef EE_EVENTID_H
#define EE_EVENTID_H

#include <efd/UniversalID.h>
#include <egf/egfLibType.h>

namespace egf
{


/**
    Unique identifier for an individual event. Each event generated by calls to SendEvent creates
    a unique value to identify that specific event. This ID is returned upon successful call to
    SendEvent.
*/
class EventID
    : public efd::UniversalID
{
public:

    /*
        Initializes the event IDs to use the framework's assigned
        shard and scheduler IDs.  This will allow CreateEventID()
        to create unique IDs on a per framework basis, even if
        multiple frameworks exist on the same physical machine.

        @param[in] i_shardID efd::UInt32 ID for shard
        @param[in] i_netID efd::UInt32 network ID
        @return bool True if all inputs are within the valid range
    */
    static EE_EGF_ENTRY bool InitEventID(efd::UInt32 i_shardID, efd::UInt32 i_netID);

    /**
        Creates a new event ID based on the machine mac address and an
        incrementing value

        @return EventID The new event ID
    */
    static EE_EGF_ENTRY EventID CreateEventID();

    /**
        Initialize an event ID to an invalid value.  Use CreateEventID to generate a valid
        and fully initialized event ID.
    */
    EventID()
        : efd::UniversalID()
    {
    }

    /**
        Initialize an event ID using an unsigned 64 bit integer

        @param i_value The EventID in it's 64bit value
    */
    EventID(efd::UInt64 i_value)
        : efd::UniversalID(i_value)
    {
    }

    /**
        Initialize an event ID using copy construction

        @param i_other const ref to the EventID instance being copied
    */
    EventID(const EventID& i_other)
        : efd::UniversalID(i_other)
    {
    }


    /**
        Convert the 64-bit value into a "pretty" formatted string

        @return efd::utf8string string with pretty formatted output
    */
    efd::utf8string ToString() const
    {
        efd::utf8string sID(efd::Formatted, "<EventID=0x%016llX>", GetValue());
        return sID;  // return pointer to actual string
    }

private:
    /// storage for the root of the EventID
    static EventID ms_rootID;
    /// storage for the efd::UInt64 base of the EventID
    static efd::UInt64 ms_baseID;
};

/// illegal Event ID
static const EventID kEVT_INVALID  = 0ull;

//@}

} // end namespace egf

#endif // EE_EVENTID_H

