#define yy_create_buffer NSFParser_create_buffer
#define yy_delete_buffer NSFParser_delete_buffer
#define yy_scan_buffer NSFParser_scan_buffer
#define yy_scan_string NSFParser_scan_string
#define yy_scan_bytes NSFParser_scan_bytes
#define yy_flex_debug NSFParser_flex_debug
#define yy_init_buffer NSFParser_init_buffer
#define yy_flush_buffer NSFParser_flush_buffer
#define yy_load_buffer_state NSFParser_load_buffer_state
#define yy_switch_to_buffer NSFParser_switch_to_buffer
#define yyin NSFParserin
#define yyleng NSFParserleng
#define yylex NSFParserlex
#define yyout NSFParserout
#define yyrestart NSFParserrestart
#define yytext NSFParsertext
#define yywrap NSFParserwrap

#line 20 "..\\NSFLexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 348
#define YY_END_OF_BUFFER 349
static yyconst short int yy_accept[2196] =
    {   0,
        0,    0,  349,  347,    1,  342,  343,  347,   10,   11,
       20,   22,   18,   23,   21,    2,    2,   26,   25,   14,
       17,   15,   24,   12,   13,   19,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,    8,   16,    9,    1,    0,
      346,    2,    7,    6,    0,    3,    0,    2,  344,  344,
      345,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,    3,  345,    3,  345,  345,    0,    4,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  323,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  345,  344,
      344,  344,  344,    3,    0,    0,    3,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  319,  344,  344,  344,  344,  344,  344,  344,  154,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  123,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  340,
      344,  344,  344,  344,  344,  344,  344,  344,  324,  344,
      344,    5,  344,  344,  344,  344,    3,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  341,  344,  322,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  318,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  155,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  121,  126,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  122,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  290,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  187,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      138,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  118,  344,  344,  344,  344,  344,  344,
      344,  344,  308,  344,  344,  344,  344,  344,  344,  249,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  235,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  289,  344,  209,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  240,  245,
      241,  344,  344,  344,  244,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      332,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  282,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  230,  344,  344,  344,  344,  344,  344,  320,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  153,  344,  344,  344,  295,  297,
      344,  344,  330,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  306,  328,  344,  344,  344,
       27,  246,  344,  243,  344,  344,  344,  344,  344,  344,
       29,  344,  344,   48,  344,  344,  344,  344,  344,   45,
      344,  344,  344,  344,   96,  344,  344,  344,  344,  344,
      344,  344,  344,  344,   95,  344,  344,  344,  344,  344,
      104,  344,  344,  117,  119,  344,  344,  111,  344,  344,
      344,  344,  184,  344,  307,  329,  344,  344,  344,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      273,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  188,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  305,  327,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  124,  344,  344,  344,  344,  292,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      309,  344,  344,  344,  344,  344,  344,  242,  247,  344,
      344,  344,   28,  344,  344,  344,  344,   50,  344,  344,
       44,  344,  344,  344,  344,  344,  344,   63,   64,   65,
       66,  344,  344,  344,  344,  344,  344,   84,   85,   86,
       87,   69,   70,   71,   72,   73,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  110,  344,  120,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  304,  344,  311,
      344,  344,  344,  344,  344,  231,  232,  344,  344,  236,
      237,  344,  344,  344,  267,  344,  284,  344,  344,  344,

      344,  344,  288,  287,  344,  344,  344,  344,  274,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  127,  344,  344,
      344,  344,  344,  344,  344,  129,  344,  344,  344,  294,
      296,  301,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  344,  344,  344,  344,   47,  344,   59,  344,  344,
      344,   60,  344,  344,  344,   88,  344,  344,  344,  344,
      344,  344,   75,   77,   79,   81,   89,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  113,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  234,  344,  269,  344,  283,  344,
      344,  344,  286,  344,  344,  344,  344,  275,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  203,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      161,  344,  344,  157,  344,  344,  344,  344,  156,  344,
      344,  344,  344,  344,  344,  179,  180,  181,  182,  344,
      344,  344,  344,  185,  186,  344,  331,  344,  344,  136,
      130,  344,  344,  344,  344,  344,  344,  344,  293,  344,
      344,  344,  344,  344,  344,  344,  344,  326,  344,  344,
      344,  344,  344,  344,  337,  344,  248,  344,  152,  344,
       61,  344,  344,  344,  344,   32,   49,  344,   67,  344,
       97,  344,  344,  344,  344,   83,  344,   91,   93,  344,
      344,  344,  344,  114,  344,  344,  107,  344,  112,  344,
      291,  325,  344,  344,  310,  344,  344,  313,  344,  344,

      344,  344,  270,  344,  268,  344,  197,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  206,  344,  344,  344,  212,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  166,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  178,  344,
      344,  189,  344,  321,  344,  344,  131,  132,  133,  128,
      344,  344,  344,  344,  344,  344,  149,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  339,  338,  344,  344,
      344,  344,  344,   62,   46,   33,   34,   35,   36,   37,

       38,   39,   40,   51,   52,   53,   54,   55,   56,   57,
       58,   98,   99,  344,  344,  344,  344,  344,  344,  344,
      105,  344,  344,  344,  116,  344,  344,  344,  303,  344,
      344,  344,  344,  239,  233,  344,  344,  344,  202,  285,
      344,  344,  344,  344,  344,  279,  344,  210,  213,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  162,  163,  164,
      344,  344,  344,  158,  159,  160,  165,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,

      344,  134,  137,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  299,  151,  316,  336,
      317,  344,  344,  344,  344,   74,   76,   78,   80,   90,
      344,   68,  103,  100,  344,  344,  344,  344,  115,  300,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  280,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  226,
      344,  207,  208,  344,  344,  344,  344,  344,  204,  205,
      250,  251,  252,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  183,

      190,  344,  298,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,   41,   82,
       92,   94,  344,  101,  102,  344,  108,  344,  302,  315,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      211,  344,  344,  344,  344,  344,  228,  344,  344,  344,
      229,  221,  263,  344,  344,  344,  265,  344,  344,  254,
      344,  344,  255,  256,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      150,  135,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  142,  344,   30,   43,   42,  344,  109,

      344,  314,  344,  344,  271,  344,  344,  344,  276,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  264,  262,  344,  344,  344,  344,
      344,  344,  344,  167,  168,  169,  170,  344,  344,  344,
      344,  344,  344,  344,  191,  344,  344,  344,  344,  333,
      344,  344,  344,  140,  344,  344,  344,  344,  344,  125,
      344,  344,  238,  272,  344,  344,  344,  344,  344,  278,
      312,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  253,  344,  344,  344,  258,  344,  260,  344,  171,
      173,  174,  344,  344,  344,  196,  344,  344,  193,  344,

      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  281,  277,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  261,  344,
      344,  172,  176,  344,  194,  195,  344,  344,  344,  344,
      344,  139,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  266,  259,  257,  344,  192,  344,  344,
      344,  344,  344,  344,  344,  344,  344,  344,   31,  344,
      344,  344,  344,  344,  217,  344,  218,  344,  344,  344,
      344,  344,  344,  344,  334,  344,  344,  146,  344,  344,

      344,  344,  344,  344,  198,  344,  344,  220,  214,  344,
      215,  344,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  145,  344,  344,  200,  216,  344,
      344,  344,  344,  344,  344,  344,  344,  335,  141,  344,
      344,  344,  143,  106,  199,  344,  219,  227,  344,  344,
      344,  344,  344,  344,  148,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  147,  344,  344,  344,  344,  344,
      344,  175,  344,  344,  344,  222,  223,  344,  344,  177,
      344,  344,  344,  344,  344,  344,  344,  344,  144,  344,
      224,  225,  344,  201,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    1,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   22,   23,   24,   25,
       26,   27,    1,   28,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       29,    1,   30,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    1,
        3,    4,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    7,    7,    7,    7,    8,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1,    1,    1
    } ;

static yyconst short int yy_base[2204] =
    {   0,
        0,    0,  213, 7513,  201, 7513, 7513,  195, 7513, 7513,
     7513,    0, 7513,    0,   53,   55,   99, 7513, 7513, 7513,
     7513, 7513, 7513, 7513, 7513,   50,   52,   82,   80,   66,
       92,   95,  120,   69,  122,   85,   74,  127,  129,  133,
      135,  160,  159,  140,  200, 7513, 7513, 7513,  167,  159,
     7513,  149, 7513, 7513,  144,  237,  141,    0,   71,  262,
        0,  137,  143,  162,  215,  172,  211,  217,  213,  226,
      146,  221,  233,  255,  257,  259,  273,  228,  236,  279,
      131,  292,  297,  301,  303,  305,  307,  315,  310,  313,
      317,  323,  320,  325,  327,  347,  335,  337,  360,  368,

      371,  339,   87,  373,  375,  384,  388,  378,  392,  381,
      409,  417,  115,   76,  457,    0,  485,   72,    0,  420,
      431,  423,  427,  433,  476,  437,  429,  449,  441,  469,
      444,  454,  479,  503,  485,  505,  508,  511,   78,  513,
      515,  517,  519,  523,  526,  532,  534,  219,  540,  543,
      546,  548,  552,  554,  439,  559,  562,  573,  575,  579,
      582,  586,  589,  591,  594,  596,  600,  603,  605,  608,
      614,  618,  623,  625,  627,  645,  647,  649,  654,  656,
      658,  662,  664,  666,  672,  674,  677,  680,  716,  690,
      685,  695,  709,   66,  178,  226,  291,  692,  699,  701,

      705,  713,  734,  736,  739,  741,  744,  746,  749,  752,
      754,  756,  759,  761,  767,  775,  777,  781,  783,  788,
      790,  231,  792,  795,  801,  803,  813,  805,  820,  822,
      830,  832,  872,  841,  839,  830,  859,  843,  846,  856,
      885,  887,  861,  889,  899,  891,  849,  901,  908,  903,
      914,  916,  925,  928,  930,  935,  939,  941,  946,  943,
      950,  957,  952,  959,  954,  962,  983,  985,  989,  996,
      998, 1007, 1000, 1009, 1012, 1016, 1024, 1030, 1034, 1038,
     1040,    0, 1048, 1053, 1055, 1059,    0, 1061, 1064, 1066,
     1068, 1073, 1070, 1075, 1077, 1079, 1082, 1090, 1092, 1094,

     1104, 1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129, 1133,
     1136, 1138, 1140, 1144, 1151, 1159, 1161, 1147, 1163, 1169,
     1172, 1174, 1186, 1190, 1192, 1194, 1200, 1202, 1204, 1206,
     1208, 1214, 1217, 1226, 1220, 1223, 1235, 1238, 1243, 1252,
     1258, 1260, 1267, 1262, 1269, 1271, 1273, 1275, 1277, 1279,
     1282, 1284, 1287, 1297, 1300, 1307, 1312, 1315, 1317, 1321,
     1325, 1327, 1329, 1331, 1333, 1335, 1340, 1342, 1350, 1345,
     1354, 1360, 1362, 1366, 1368, 1373, 1380, 1387, 1383, 1389,
     1419, 1393, 1398, 1401, 1409, 1404, 1411, 1413, 1422, 1433,
     1425, 1415, 1427, 1436, 1442, 1461, 1463, 1465, 1468, 1471,

     1474, 1476, 1479, 1484, 1490, 1492, 1504, 1506, 1508, 1510,
     1517, 1519, 1521, 1523, 1526, 1531, 1529, 1533, 1537, 1546,
     1544, 1552, 1557, 1559, 1562, 1569, 1572, 1574, 1576, 1578,
     1582, 1584, 1594, 1597, 1591, 1599, 1601, 1604, 1606, 1608,
     1611, 1619, 1622, 1627, 1616, 1631, 1634, 1639, 1643, 1646,
     1648, 1651, 1636, 1655, 1670, 1657, 1673, 1675, 1677, 1680,
     1683, 1686, 1688, 1690, 1692, 1696, 1702, 1704, 1711, 1715,
     1718, 1720, 1725, 1728, 1730, 1732, 1738, 1743, 1745, 1750,
     1754, 1756, 1760, 1763, 1766, 1768, 1770, 1776, 1778, 1784,
     1788, 1790, 1792, 1800, 1802, 1809, 1811, 1813, 1819, 1821,

     1823, 1828, 1834, 1836, 1841, 1843, 1846, 1849, 1859, 1861,
     1863, 1869, 1872, 1874, 1881, 1883, 1876, 1885, 1889, 1897,
     1899, 1910, 1914, 1919, 1921, 1916, 1924, 1926, 1929, 1932,
     1936, 1946, 1943, 1950, 1952, 1956, 1958, 1960, 1968, 1972,
     1963, 1975, 1983, 1988, 1992, 1997, 2008, 2010, 2015, 2019,
     2021, 2023, 2026, 2029, 2031, 2033, 2036, 2071, 2039, 2043,
     2046, 2050, 2056, 2058, 2065, 2060, 2067, 2075, 2085, 2087,
     2090, 2099, 2101, 2117, 2104, 2119, 2107, 2122, 2129, 2133,
     2135, 2144, 2146, 2148, 2150, 2152, 2158, 2160, 2162, 2164,
     2166, 2173, 2175, 2181, 2185, 2187, 2189, 2191, 2195, 2200,

     2205, 2211, 2215, 2217, 2219, 2227, 2221, 2230, 2232, 2234,
     2236, 2240, 2250, 2257, 2260, 2262, 2265, 2268, 2276, 2270,
     2273, 2278, 2281, 2283, 2285, 2290, 2288, 2292, 2308, 2294,
     2313, 2321, 2323, 2325, 2328, 2330, 2336, 2338, 2340, 2342,
     2344, 2346, 2351, 2354, 2356, 2358, 2361, 2363, 2368, 2373,
     2375, 2384, 2386, 2388, 2390, 2399, 2401, 2403, 2405, 2407,
     2409, 2411, 2414, 2416, 2418, 2420, 2422, 2425, 2436, 2438,
     2443, 2445, 2453, 2455, 2459, 2461, 2465, 2467, 2469, 2471,
     2474, 2476, 2479, 2481, 2489, 2491, 2494, 2500, 2502, 2504,
     2512, 2514, 2517, 2519, 2521, 2527, 2529, 2534, 2536, 2541,

     2544, 2546, 2551, 2556, 2563, 2566, 2569, 2571, 2574, 2576,
     2581, 2583, 2586, 2590, 2592, 2594, 2598, 2600, 2605, 2607,
     2612, 2622, 2627, 2629, 2633, 2635, 2640, 2642, 2647, 2644,
     2649, 2651, 2653, 2658, 2665, 2667, 2669, 2675, 2677, 2679,
     2691, 2694, 2696, 2698, 2700, 2702, 2704, 2708, 2711, 2713,
     2719, 2728, 2721, 2732, 2739, 2745, 2749, 2754, 2751, 2756,
     2759, 2761, 2766, 2763, 2768, 2770, 2773, 2775, 2779, 2781,
     2783, 2785, 2795, 2797, 2799, 2806, 2809, 2811, 2813, 2818,
     2821, 2823, 2825, 2827, 2833, 2837, 2839, 2841, 2847, 2850,
     2843, 2853, 2855, 2858, 2865, 2868, 2872, 2883, 2885, 2887,

     2889, 2893, 2896, 2898, 2900, 2904, 2907, 2909, 2915, 2913,
     2919, 2921, 2931, 2934, 2936, 2941, 2948, 2945, 2952, 2954,
     2957, 2962, 2959, 2967, 2970, 2973, 2975, 2977, 2979, 2981,
     2983, 2987, 2989, 3002, 2995, 3004, 2998, 3009, 3013, 3016,
     3027, 3030, 3033, 3035, 3037, 3041, 3043, 3045, 3048, 3051,
     3053, 3056, 3060, 3062, 3068, 3073, 3084, 3075, 3086, 3090,
     3092, 3094, 3096, 3102, 3104, 3113, 3108, 3117, 3119, 3121,
     3123, 3125, 3132, 3136, 3142, 3139, 3146, 3148, 3150, 3152,
     3154, 3159, 3168, 3171, 3177, 3183, 3185, 3187, 3189, 3192,
     3195, 3200, 3206, 3208, 3210, 3212, 3219, 3221, 3230, 3234,

     3236, 3240, 3244, 3246, 3250, 3255, 3257, 3259, 3261, 3263,
     3265, 3269, 3271, 3275, 3279, 3281, 3286, 3288, 3292, 3299,
     3301, 3305, 3308, 3312, 3314, 3316, 3323, 3326, 3328, 3330,
     3332, 3336, 3338, 3343, 3340, 3345, 3347, 3351, 3358, 3364,
     3360, 3367, 3369, 3376, 3384, 3386, 3388, 3390, 3393, 3395,
     3397, 3401, 3403, 3405, 3410, 3407, 3412, 3421, 3423, 3425,
     3427, 3436, 3438, 3440, 3446, 3449, 3456, 3461, 3463, 3465,
     3473, 3488, 3501, 3476, 3467, 3478, 3484, 3499, 3508, 3510,
     3512, 3514, 3520, 3522, 3525, 3527, 3529, 3531, 3535, 3533,
     3540, 3537, 3543, 3549, 3551, 3553, 3555, 3563, 3567, 3569,

     3572, 3575, 3577, 3579, 3583, 3585, 3587, 3591, 3600, 3604,
     3606, 3610, 3612, 3615, 3620, 3627, 3631, 3639, 3641, 3643,
     3645, 3647, 3650, 3653, 3655, 3658, 3660, 3667, 3674, 3679,
     3681, 3683, 3687, 3690, 3692, 3695, 3697, 3700, 3702, 3704,
     3707, 3709, 3716, 3720, 3729, 3731, 3739, 3744, 3746, 3748,
     3750, 3753, 3756, 3760, 3763, 3765, 3768, 3771, 3777, 3779,
     3781, 3789, 3800, 3794, 3804, 3806, 3810, 3815, 3817, 3824,
     3828, 3821, 3830, 3834, 3836, 3839, 3842, 3849, 3845, 3857,
     3861, 3864, 3866, 3870, 3874, 3878, 3882, 3886, 3888, 3890,
     3892, 3897, 3900, 3902, 3904, 3907, 3910, 3912, 3914, 3917,

     3921, 3926, 3928, 3931, 3934, 3938, 3942, 3944, 3948, 3954,
     3956, 3963, 3967, 3969, 3976, 3978, 3981, 3983, 3985, 3989,
     3991, 3996, 3994, 3998, 4002, 4005, 4010, 4017, 4019, 4024,
     4028, 4026, 4035, 4039, 4041, 4045, 4047, 4049, 4051, 4055,
     4060, 4062, 4064, 4066, 4070, 4072, 4074, 4076, 4087, 4089,
     4091, 4093, 4095, 4097, 4101, 4103, 4105, 4107, 4109, 4115,
     4118, 4120, 4122, 4124, 4131, 4137, 4140, 4143, 4145, 4149,
     4151, 4153, 4161, 4163, 4166, 4168, 4172, 4175, 4177, 4179,
     4182, 4189, 4193, 4197, 4199, 4203, 4206, 4208, 4210, 4214,
     4218, 4220, 4224, 4226, 4230, 4233, 4235, 4237, 4239, 4241,

     4245, 4248, 4250, 4252, 4254, 4261, 4263, 4266, 4270, 4277,
     4279, 4281, 4283, 4286, 4288, 4294, 4296, 4308, 4299, 4310,
     4312, 4314, 4316, 4325, 4329, 4332, 4338, 4340, 4342, 4344,
     4346, 4348, 4353, 4357, 4365, 4371, 4373, 4375, 4380, 4378,
     4386, 4389, 4391, 4393, 4396, 4404, 4406, 4408, 4410, 4412,
     4414, 4418, 4420, 4427, 4433, 4438, 4447, 4441, 4454, 4458,
     4460, 4462, 4466, 4468, 4473, 4478, 4481, 4483, 4485, 4487,
     4493, 4495, 4499, 4501, 4507, 4503, 4509, 4511, 4513, 4515,
     4517, 4523, 4527, 4529, 4538, 4542, 4546, 4551, 4553, 4555,
     4559, 4561, 4563, 4568, 4570, 4572, 4577, 4580, 4582, 4591,

     4598, 4593, 4600, 4603, 4605, 4612, 4616, 4618, 4620, 4623,
     4627, 4636, 4638, 4640, 4643, 4645, 4647, 4649, 4653, 4657,
     4659, 4666, 4668, 4670, 4672, 4674, 4680, 4682, 4684, 4686,
     4688, 4691, 4694, 4697, 4701, 4704, 4707, 4709, 4711, 4714,
     4720, 4722, 4728, 4736, 4738, 4740, 4744, 4747, 4750, 4755,
     4758, 4761, 4763, 4767, 4769, 4771, 4775, 4778, 4780, 4786,
     4788, 4790, 4797, 4799, 4801, 4803, 4806, 4811, 4816, 4822,
     4818, 4831, 4833, 4835, 4840, 4843, 4845, 4847, 4849, 4854,
     4858, 4860, 4862, 4864, 4870, 4872, 4875, 4878, 4882, 4885,
     4887, 4891, 4896, 4893, 4899, 4901, 4904, 4909, 4916, 4925,

     4928, 4930, 4937, 4941, 4945, 4948, 4952, 4954, 4956, 4959,
     4964, 4966, 4969, 4971, 4973, 4976, 4978, 4980, 4982, 4990,
     4993, 4998, 5000, 5002, 5005, 5007, 5010, 5012, 5015, 5019,
     5021, 5023, 5033, 5026, 5028, 5035, 5040, 5042, 5044, 5048,
     5054, 5056, 5058, 5061, 5067, 5071, 5073, 5075, 5079, 5082,
     5084, 5093, 5095, 5097, 5103, 5105, 5107, 5109, 5111, 5114,
     5116, 5119, 5124, 5121, 5127, 5154, 5129, 5162, 5131, 5133,
     5135, 5148, 5142, 5173, 5145, 5175, 5177, 5179, 5183, 5185,
     5187, 5189, 5192, 5194, 5198, 5201, 5203, 5205, 5207, 5209,
     5213, 5215, 5219, 5221, 5230, 5232, 5235, 5237, 5240, 5243,

     5245, 5247, 5249, 5251, 5254, 5256, 5261, 5263, 5267, 5269,
     5272, 5274, 5279, 5281, 5286, 5289, 5292, 5294, 5296, 5301,
     5304, 5308, 5310, 5312, 5316, 5331, 5339, 5324, 5318, 5327,
     5341, 5345, 5348, 5352, 5354, 5356, 5360, 5362, 5370, 5373,
     5375, 5377, 5381, 5383, 5388, 5390, 5402, 5392, 5397, 5415,
     5417, 5419, 5427, 5429, 5431, 5433, 5435, 5437, 5439, 5444,
     5446, 5452, 5457, 5454, 5460, 5462, 5465, 5472, 5475, 5481,
     5483, 5485, 5487, 5489, 5493, 5491, 5495, 5498, 5502, 5500,
     5508, 5510, 5504, 5512, 5515, 5517, 5522, 5525, 5533, 5537,
     5540, 5549, 5551, 5553, 5558, 5562, 5564, 5566, 5569, 5572,

     5574, 5576, 5579, 5581, 5583, 5585, 5587, 5589, 5591, 5593,
     5595, 5597, 5599, 5601, 5603, 5610, 5612, 5617, 5614, 5619,
     5621, 5626, 5628, 5632, 5630, 5634, 5637, 5639, 5641, 5643,
     5645, 5652, 5647, 5660, 5664, 5666, 5673, 5679, 5681, 5683,
     5687, 5691, 5693, 5695, 5697, 5699, 5702, 5704, 5709, 5711,
     5716, 5718, 5720, 5723, 5727, 5729, 5731, 5736, 5739, 5743,
     5745, 5747, 5750, 5761, 5763, 5770, 5777, 5779, 5781, 5783,
     5788, 5790, 5792, 5796, 5798, 5806, 5808, 5813, 5817, 5825,
     5827, 5829, 5831, 5833, 5835, 5837, 5841, 5843, 5848, 5845,
     5853, 5855, 5857, 5859, 5862, 5866, 5871, 5868, 5874, 5877,

     5882, 5884, 5886, 5888, 5896, 5898, 5900, 5904, 5902, 5906,
     5914, 5909, 5911, 5918, 5920, 5922, 5927, 5929, 5939, 5941,
     5943, 5948, 5950, 5954, 5957, 5959, 5963, 5965, 5967, 5969,
     5971, 5978, 5980, 5983, 5985, 5987, 5989, 5991, 5994, 5996,
     5998, 6000, 6002, 6006, 6009, 6011, 6014, 6016, 6018, 6020,
     6023, 6031, 6037, 6041, 6043, 6047, 6049, 6051, 6053, 6058,
     6055, 6061, 6064, 6068, 6070, 6072, 6075, 6078, 6081, 6083,
     6091, 6093, 6095, 6099, 6104, 6106, 6108, 6110, 6114, 6116,
     6118, 6120, 6122, 6125, 6131, 6136, 6138, 6144, 6148, 6142,
     6155, 6166, 6168, 6170, 6172, 6178, 6182, 6185, 6180, 6187,

     6189, 6191, 6195, 6197, 6199, 6208, 6213, 6216, 6219, 6221,
     6226, 6223, 6233, 6235, 6237, 6243, 6250, 6252, 6254, 6256,
     6258, 6262, 6264, 6270, 6272, 6274, 6277, 6279, 6281, 6284,
     6286, 6293, 6295, 6298, 6300, 6303, 6305, 6307, 6309, 6313,
     6315, 6319, 6327, 6330, 6338, 6340, 6342, 6344, 6348, 6353,
     6355, 6359, 6363, 6365, 6367, 6369, 6376, 6378, 6383, 6385,
     6387, 6389, 6391, 6393, 6395, 6397, 6402, 6407, 6409, 6418,
     6422, 6425, 6427, 6414, 6429, 6435, 6431, 6441, 6443, 6447,
     6449, 6453, 6456, 6458, 6465, 6468, 6470, 6474, 6476, 6478,
     6483, 6485, 6489, 6491, 6493, 6495, 6501, 6504, 6510, 6512,

     6519, 6521, 6523, 6525, 6529, 6532, 6534, 6536, 6540, 6542,
     6544, 6550, 6552, 6554, 6556, 6558, 6561, 6571, 6579, 6582,
     6584, 6586, 6591, 6593, 6595, 6597, 6601, 6604, 6606, 6608,
     6610, 6616, 6621, 6612, 6626, 6629, 6631, 6641, 6643, 6646,
     6648, 6650, 6652, 6655, 6657, 6660, 6662, 6664, 6666, 6668,
     6671, 6676, 6678, 6682, 6685, 6689, 6692, 6694, 6698, 6700,
     6706, 6709, 6711, 6717, 6719, 6721, 6723, 6727, 6731, 6734,
     6736, 6738, 6740, 6742, 6744, 6750, 6746, 6757, 6761, 6752,
     6765, 6767, 6772, 6782, 6784, 6788, 6790, 6792, 6794, 6797,
     6799, 6801, 6803, 6807, 6812, 6814, 6816, 6820, 6822, 6826,

     6828, 6834, 6831, 6836, 6838, 6848, 6842, 6854, 6844, 6856,
     6858, 6866, 6869, 6873, 6876, 6878, 6882, 6886, 6891, 6893,
     6895, 6899, 6902, 6905, 6907, 6909, 6911, 6913, 6915, 6919,
     6928, 6930, 6932, 6937, 6939, 6941, 6943, 6946, 6948, 6951,
     6953, 6955, 6957, 6959, 6961, 6964, 6968, 6970, 6975, 6977,
     6985, 6990, 6995, 7000, 7003, 7006, 7008, 7010, 7012, 7015,
     7017, 7019, 7025, 7029, 7033, 7035, 7042, 7044, 7046, 7048,
     7050, 7052, 7054, 7056, 7058, 7060, 7064, 7066, 7070, 7072,
     7077, 7079, 7082, 7088, 7094, 7098, 7106, 7109, 7111, 7113,
     7115, 7118, 7120, 7122, 7126, 7130, 7132, 7134, 7140, 7142,

     7145, 7148, 7150, 7155, 7157, 7160, 7162, 7164, 7166, 7168,
     7170, 7173, 7176, 7180, 7182, 7186, 7190, 7192, 7196, 7203,
     7207, 7209, 7213, 7215, 7217, 7222, 7224, 7228, 7230, 7234,
     7236, 7238, 7243, 7246, 7248, 7250, 7252, 7258, 7261, 7263,
     7267, 7275, 7277, 7279, 7281, 7283, 7285, 7288, 7292, 7294,
     7296, 7299, 7301, 7303, 7307, 7309, 7311, 7313, 7315, 7320,
     7330, 7325, 7332, 7334, 7336, 7338, 7350, 7353, 7355, 7358,
     7363, 7360, 7367, 7371, 7376, 7373, 7378, 7380, 7382, 7384,
     7386, 7398, 7388, 7401, 7395, 7403, 7406, 7415, 7408, 7418,
     7423, 7425, 7429, 7431, 7513, 7478,   90, 7485, 7490, 7494,

     7497, 7500, 7506
    } ;

static yyconst short int yy_def[2204] =
    {   0,
     2195,    1, 2195, 2195, 2195, 2195, 2195, 2196, 2195, 2195,
     2195, 2197, 2195, 2197, 2198, 2199, 2199, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199,   42, 2199,   17, 2195, 2195, 2195, 2195, 2196,
     2195, 2197, 2195, 2195, 2200, 2201, 2200,   17, 2199,   17,
     2201, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,   45,
     2199, 2199, 2202, 2200, 2201, 2201, 2201, 2198,   60, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2201, 2199,
     2199, 2199, 2199, 2202, 2203, 2203,  117, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199,  234, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199,  189, 2199, 2199, 2199, 2199,  196, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 1466, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,

     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199, 2199,
     2199, 2199, 2199, 2199,    0, 2195, 2195, 2195, 2195, 2195,

     2195, 2195, 2195
    } ;

static yyconst short int yy_nxt[7574] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,    4,   15,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       30,   30,   36,   37,   38,   39,   40,   30,   41,   42,
       43,   44,   45,   30,   30,   30,   30,   46,   47,   48,
       53,   61,   57,   61,   57,   54,   56,   57,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   61,   57, 2195,
       61,   57,   61,   57, 2195,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   52,   61,   57,   61,   57,

       62,  195,   63,   61,   57,   81,   61,   57,   77,   60,
       56,   57,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   64,   66,   67,   80,   68,   72,   65,   70,   69,
       73,   61,   57,   61,   57,  177,   71,   74,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
      195,   61,   57,  118,   61,   57,   57,   61,   57,   82,
      113,   85,   75,   51,   87,   78,   79,   88,   49,   76,
       93,   61,   57,   61,   57,   89,   83,   84,   90,  108,
       86,   91,   92,   61,   57,  142,  196,  120,  196,  109,
      100,   94,  101,  121,  102,   95,  129,  103,   96,   51,

       59,   97,   49,  124,  104,   98,  122,  105,  106,  107,
       99,   61, 2195,  110,  110,  110,  110,  110,  110,  110,
      110,  110,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 2195,  111, 2195,   61,   57,   61,
       57,  125,   61,   57,   61,   57, 2195,   61,   57,  112,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  123,
      229,  126,  128,  130,  131,  127,   61,   57,   61,   57,
       61,   57,  117,   61,  138,  119,  119,  119,  119,  119,
      119,  119,  119,  119,   61,   57,  139, 2195,  140,  134,
       61,   57,  119,  119,  119,  119,  119,  119,  119, 2195,

      132, 2195,  133,   61,   57,  135, 2195,  137,   61,   57,
     2195,  136,   61,   57,   61,   57,   61,   57,   61,   57,
     2195,   61,   57,  141,   61,   57,   61,   57,   61,   57,
     2195,   61,   57,  144,   61,   57,   61,   57,   61,   57,
      148,  154,  143,  146,  145,  150,   61,   57,   61,   57,
       61,   57,  155,  157, 2195,  147,  149, 2195,   61,   57,
     2195,  151,  156, 2195,  160,  152,  153,  161,  162,  158,
      164,   61,   57,  167,  166,  159, 2195,  163,  165,   61,
       57, 2195,   61,   57,   61,   57,   61,   57,  168,   61,
       57,  169,  189,  176, 2195,   61,   57, 2195,  171,   61,

       57, 2195,  172,   61,   57, 2195,  179, 2195,  170,  173,
      174, 2195,  175, 2195,  180,  182,   59, 2195,  184,  178,
       61,   57,  187, 2195,  185, 2195,  181,  188,   61,   57,
       59,   61,   57,  183,   61,   57, 2195,  186,   61,   57,
       61,   57,   61,   57,   61,   57, 2195,  191,   61,   57,
       61,   57,   61,   57, 2195,   61,   57,  190, 2195,  198,
       61,   57,  201,  192,  209,   61,   57, 2195,  200,  193,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  199,
       61,   57,  202,  238,  210,  214,  208,   61,   57,  211,
       61,   57,  117,  196,  213,  196,   61,   57,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  203, 2195,  204,
      205,  215, 2195,  206,   61,   57,   61,   57,  212,   61,
       57,  207,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57, 2195,  217,   61,   57,  216,   61,   57, 2195,
      218, 2195,  219,   61,   57,   61,   57, 2195,  221, 2195,
      222,   61,   57,  220,   61,   57,  226,   61,   57,   61,
       57, 2195,  224,   61,   57,   61,   57,  227, 2195,  223,
       61,   57,  225,   61,   57, 2195,  233, 2195,  234,  231,
      228, 2195,  236,  235,   61,   57,   61,   57, 2195,  230,
       61,   57,  232,   61,   57,  241,  239,   61,   57,  240,

       61,   57,   61,   57,  237,   61,   57,   61,   57, 2195,
      243,   61,   57,  244,   61,   57,   61,   57, 2195,   61,
       57,  242,  248, 2195,  247,   61,   57, 2195,  249,   61,
       57, 2195,  246,  245,   61,   57,   61,   57,   61,   57,
      250, 2195,  253,  254, 2195,  255, 2195,  256,  257, 2195,
      251,  252,  260,  261, 2195,  262,   61,   57,   61,   57,
       61,   57, 2195,  258,  259,   61,   57,   61,   57,   61,
       57, 2195,  263,   61,   57,   61,   57,   61,   57,  267,
     2195,  264,  266,   61,   57,   61,   57,  269,   61,   57,
     2195,   61,   57,  270,  272,  265,   61,   57,  268,  273,

      274,   61,   57,   61,   57,  271,   61,   57,  277, 2195,
       61,   57,   61,   57, 2195,  275,   61,   57,  284,  276,
       61,   57,  278,  280,   61,   57, 2195,  279,  281,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  289, 2195,
      283,  288, 2195,  285,  286,   61,   57,   61,   57,  290,
       61,   57,   61,   57,  291,   61,   57,   61,   57, 2195,
       61,   57,  292,   61,   57,   61,   57,   61,   57, 2195,
       61,   57,   61,   57,  295, 2195,  297, 2195,   61,   57,
     2195,  294, 2195,  296,  293,  301,   61,   57,   61,   57,
      298,  303,   61,   57,   61,   57,  299,  300,  306,   61,

       57,   61,   57,   61,   57, 2195,   61,   57, 2195,  302,
      304,  305,   61,   57,   61,   57,   61,   57,  310, 2195,
      307, 2195,  308,  311,   61,   57, 2195,  313, 2195,  309,
      314,   61,   57,   61,   57,  316, 2195,  317,  312,  315,
      318,   61,   57,   61,   57, 2195,  321,  319, 2195,  320,
       61,   57,   61,   57,   61,   57,  322,   61,   57,  323,
       61,   57,  341,  342,  343, 2195,  344,   61,   57,  324,
       61,   57,   61,   57,  345,  334,  346,  335, 2195,  347,
      348,   59,  325,   61,   57,  336, 2195,  337,  340, 2195,
      338,  352,  339,  350,  351,  349,   61,   57,   61,   57,

       61,   57,   61,   57,  326,  327,  328,  329, 2195,  355,
       61,   57,   61,   57,   61,   57,  330, 2195,  331,   61,
       57,  332,  333, 2195,  356,   61,   57,   61,   57, 2195,
      353, 2195,  354,  358, 2195,  361,   61,   57,  357,   61,
       57,   61,   57,  360, 2195,  359,   61,   57, 2195,  363,
       61,   57,   61,   57,   61,   57, 2195,   61,   57,  365,
      364,   61,   57,   61,   57,   61,   57,  362,   61,   57,
       61,   57,  366,   61,   57, 2195,  370, 2195,  369, 2195,
      367,  372,  373, 2195,  375,  376,  368,  371, 2195,  381,
      377,  374, 2195,  383,   61,   57,   61,   57,  380, 2195,

       61,   57, 2195,  378, 2195,  382,  379,   61,   57,   61,
       57,   61,   57, 2195,  384,  385, 2195,  386,   61,   57,
       61,   57, 2195,   61,   57,  387,  388,   61,   57,  389,
     2195,  399,  390,  392,  391,   61,   57, 2195,  394,  395,
      396,   61,   57, 2195,  393,   61,   57, 2195,  400,   61,
       57,   61,   57, 2195,  403,  397, 2195,  398,  401,   61,
       57,  402, 2195,  404,   61,   57,   61,   57, 2195,  405,
       61,   57,   61,   57,  406,   61,   57,   61,   57,   61,
       57,   61,   57,  408,   61,   57,   61,   57,   61,   57,
       61,   57,  407,   61,   57, 2195,  413, 2195,  409, 2195,

      410,   61,   57,   61,   57,   61,   57,  411, 2195,  414,
     2195,  412, 2195,  419,  415,   61,   57,  416, 2195,  418,
      417, 2195,  421,  423,  420,  422,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57, 2195,  424,   61,   57, 2195,   61,   57,   61,
       57,   61,   57, 2195,  425,   61,   57, 2195,   61,   57,
     2195,  426,   61,   57,  430,  428, 2195,  427, 2195,  429,
       61,   57,   61,   57,   61,   57, 2195,  432,  431,  433,
       61,   57,  437,   61,   57,   61,   57,  434,  435,  442,
      438, 2195,  440, 2195,  436, 2195,  441,   61,   57, 2195,

      444,   61,   57,   61,   57,   61,   57, 2195,  443, 2195,
      439,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 2195,  445, 2195,  446,   61,   57, 2195,   61,   57,
      447,   61,   57,  450,   61,   57,  451,   61,   57, 2195,
      449,  453,  461, 2195,  448,  452,   61,   57,  459,   61,
       57,  455,  460,  456,   61,   57, 2195,  457,  454, 2195,
      458,  462,  463,   61,   57, 2195,  465,  466,  464,   61,
       57,   61,   57,   61,   57,  468,  467,  469,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,  470,   61,   57,   61,   57,  472,   61,   57,

      473,  471,  475, 2195,  480,  474,  481,  476,   61,   57,
      482,   61,   57,  484,  477, 2195,  478,  485,   61,   57,
      479, 2195,  483,   61,   57, 2195,   61,   57,   61,   57,
     2195,  486,   61,   57,  487, 2195,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2195,  488,
      491,   61,   57,   61,   57,  489,   61,   57,  495, 2195,
      490,   61,   57, 2195,  496,   61,   57,  492, 2195,  493,
      494,   61,   57,   61,   57, 2195,  497,   61,   57,   61,
       57,  498, 2195,  499,   61,   57,  501,  502, 2195,  503,
      500,   61,   57,  506,   61,   57,  507, 2195,   61,   57,

       61,   57, 2195,  504,   61,   57, 2195,  508, 2195,   61,
       57,  510,   61,   57,  505,   61,   57,  509,  511,  513,
       61,   57,   61,   57,   61,   57,   61,   57, 2195,  512,
       61,   57,  523,   61,   57,  524,   61,   57,   61,   57,
     2195,  522, 2195,  527,   61,   57,  529,   61,   57,  528,
      514,  525,  536,   61,   57,  515,  516,  537,  530, 2195,
      526,  517,  518,  519,  531,  520,  521, 2195,  533, 2195,
      532,  535,   61,   57,   61,   57,   61,   57,  538,   61,
       57, 2195,   61,   57,  534,   61,   57,   61,   57, 2195,
       61,   57, 2195,  539, 2195,   61,   57, 2195,  541, 2195,

      542,   61,   57,   61,   57, 2195,  540,  544, 2195,  545,
     2195,  543,  547,  548,  550,   61,   57,   61,   57,   61,
       57,   61,   57, 2195,  546,  549, 2195,  552,   61,   57,
       61,   57,   61,   57,   61,   57,  551,   61,   57,  553,
       61,   57,   61,   57,   61,   57, 2195,  556,   61,   57,
     2195,  558,  555, 2195,  560,   61,   57,   61,   57, 2195,
      554,  561,  562,   61,   57, 2195,  557, 2195,   61,   57,
       61,   57,  559,   61,   57, 2195,  565,  563,  566,  567,
       61,   57,  564,   61,   57,   61,   57,   61,   57,   61,
       57, 2195,  571,   61,   57,   61,   57, 2195,  570, 2195,

      568,  569,   61,   57,  574,   61,   57,  573,   61,   57,
       61,   57,   61,   57,  572,   61,   57,   61,   57,   61,
       57,  577,   61,   57, 2195,  575,  576,   61,   57,  578,
       61,   57,  579,   61,   57,  582, 2195,  581,   61,   57,
     2195,  580,   61,   57,  586,   61,   57,   61,   57,  584,
       61,   57, 2195,  583,   61,   57,  585,   61,   57,   61,
       57,  587,   61,   57,  588,  591,   61,   57,   61,   57,
      589,  594,  600, 2195,  595,  590, 2195,  592,  596, 2195,
      593,   61,   57,  598,   61,   57,   61,   57,   61,   57,
      597,   61,   57,  599,   61,   57,  603,   61,   57,   61,

       57,   61,   57,   61,   57,  601,  604,   61,   57, 2195,
      606, 2195,  605,   61,   57,   61,   57,  609,  602,  610,
     2195,  607,   61,   57, 2195,  613,   61,   57, 2195,   61,
       57,   61,   57,  611,  608, 2195,   61,   57,  612,   61,
       57,   61,   57,   61,   57, 2195,  617,  615,  619,   61,
       57,  614, 2195,  618,   61,   57,   61,   57, 2195,  616,
      621,   61,   57, 2195,  620,   61,   57,   61,   57,  624,
      622,   61,   57, 2195,   61,   57,  623,   61,   57,   61,
       57,   61,   57, 2195,  627, 2195,  625,   61,   57,   61,
       57, 2195,  626,  628, 2195,   61,   57, 2195,  629,   61,

       57,   61,   57,   61,   57,  630,  633, 2195,  632, 2195,
      631,   61,   57,   61,   57,  637,  634,  635,  636,  639,
       61,   57,   61,   57,   61,   57, 2195,  638, 2195,  641,
       61,   57,   61,   57,   61,   57,  640, 2195,  642,   61,
       57, 2195,  643, 2195,  644,   61,   57,   61,   57, 2195,
      645,  647,   61,   57,   61,   57,  646,   61,   57,  650,
       61,   57, 2195,  651, 2195,  648, 2195,  652, 2195,  649,
       61,   57,   61,   57,   61,   57,  655, 2195,  656,  657,
       61,   57,  653,   61,   57,   61,   57,   61,   57,  658,
      661,  654,   61,   57,   61,   57,   61,   57,  660,  659,

       61,   57, 2195,  665,  662, 2195,  666,  664,   61,   57,
       61,   57,  663,  667,  671,  672,  673, 2195,  669, 2195,
      668,   61,   57,  670, 2195,   61,   57,   61,   57, 2195,
       61,   57,   61,   57,  674,   61,   57,   61,   57, 2195,
       61,   57,  675,   61,   57,  678, 2195,   61,   57, 2195,
      677,  679,  676,  680,   61,   57,  681,   61,   57,  682,
     2195,   61,   57,   61,   57, 2195,  686,   61,   57,   61,
       57,   61,   57,  683,   61,   57,  684,  685,  687,   61,
       57,  688,  690,   61,   57,  689,   61,   57, 2195,  693,
      694,  695,  696,  697,   61,   57, 2195,  691,  692,   61,

       57,  698, 2195,   61,   57, 2195,  700,  699,   61,   57,
     2195,  701,  704, 2195,  702, 2195,  703, 2195,  706,   61,
       57,   61,   57, 2195,  707,  708,   61,   57, 2195,  705,
       61,   57,   61,   57,   61,   57, 2195,   61,   57,  709,
       61,   57,   61,   57,   61,   57, 2195,   61,   57,  711,
       61,   57,  713,  710,   61,   57,  714,   61,   57,  717,
      715,   61,   57,  712, 2195,  719, 2195,   61,   57,   61,
       57,   61,   57,  716,  718,  722,   61,   57,   61,   57,
      720,  721,   61,   57, 2195,  732,   61,   57, 2195,  731,
     2195,  738, 2195,  734,  733,  735,   61,   57,   61,   57,

      739,   61,   57,  723,  724, 2195,  740,  725,  736,  737,
       61,   57,   61,   57,  726,   61,   57,  727,   61,   57,
      728,  729,  730, 2195,  743,  744,  745,  746,   61,   57,
       61,   57,  742,   61,   57,  741,  747, 2195,  749,  748,
       61,   57, 2195,  750,   61,   57,   61,   57,  751, 2195,
      753, 2195,  754, 2195,  752,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2195,  755, 2195,  756,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,  758,
      757,  759, 2195,  762,   61,   57,   61,   57, 2195,  763,
     2195,  761,   61,   57,  760,  767,   61,   57,   61,   57,

       61,   57,   61,   57, 2195,  766,   61,   57, 2195,  764,
     2195,   61,   57,  765, 2195,  770,   61,   57,  772,  771,
     2195,  768,   61,   57, 2195,  769,   61,   57,   61,   57,
       61,   57,   61,   57,  773,  774,  776, 2195,   61,   57,
      775,   61,   57,   61,   57,   61,   57,   61,   57, 2195,
      786,   61,   57,  777,  778, 2195,  780, 2195,  783,  779,
      782,   61,   57,  784, 2195,  785, 2195,  787,   61,   57,
     2195,   61,   57,   61,   57,  781,   61,   57, 2195,   61,
       57,   61,   57,  788,   61,   57, 2195,   61,   57,   61,
       57,  789,   61,   57,   61,   57,   61,   57,  793,   61,

       57,   61,   57,   61,   57,   61,   57,  790,  791,  795,
      796, 2195,  792,  794, 2195,  800, 2195,  801,  797,   61,
       57, 2195,  798,  802,   61,   57, 2195,  799,  804,  805,
     2195,  803,   61,   57,   61,   57,   61,   57,  807,   61,
       57,   61,   57,  809,  806,  808,  810,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 2195,
      812,  814,   61,   57,  811,   61,   57,   61,   57,   61,
       57, 2195,   61,   57,   61,   57, 2195,  818,  813,   61,
       57,  815,  820,  817,   61,   57,   61,   57,  816,  822,
     2195,  823,  825, 2195,  819,   61,   57,   61,   57,   61,

       57,   61,   57,  827, 2195,  826,  821, 2195,  829,  824,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57,  828,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,  830,   61,   57,  837,  831,
      832,  838,  835,  834,  833, 2195,  839,   61,   57,   61,
       57,  841, 2195,  836,   61,   57,   61,   57, 2195,  843,
      842,  844,  845,  840,   61,   57,   61,   57, 2195,  847,
       61,   57,   61,   57, 2195,  846,   61,   57,   61,   57,
       61,   57,   61,   57, 2195,   61,   57,   61,   57,  849,
       61,   57,   61,   57,  848, 2195,  854, 2195,  852,  851,

       61,   57,   61,   57,  855,   61,   57,  850, 2195,  853,
      860,   61,   57,   61,   57,   61,   57,  856,  858, 2195,
      857, 2195,  859,   61,   57,   61,   57,  861,   61,   57,
       61,   57,   61,   57, 2195,  862, 2195,  866,   61,   57,
       61,   57,  863,  865,  864,   61,   57,   61,   57,  869,
     2195,  870,   61,   57,  867,   61,   57,   61,   57,  871,
     2195,  868,   61,   57,  872,  876,  873,   61,   57, 2195,
      874,  875, 2195,  877,   61,   57, 2195,   61,   57,  879,
       61,   57,   61,   57,  878,   61,   57,   61,   57, 2195,
      880,  881,   61,   57,   61,   57,  884,   61,   57, 2195,

      882,   61,   57,   61,   57,   61,   57,  883,  889,   61,
       57,   61,   57,  885,  886, 2195,   61,   57,   61,   57,
      887, 2195,  888,   61,   57,  896, 2195,  890,  892, 2195,
      891,  893,  894,   61,   57, 2195,  895,  897,   61,   57,
       61,   57, 2195,  901,   61,   57,   61,   57, 2195,  898,
      899,   61,   57,   61,   57,   61,   57,  900,   61,   57,
       61,   57,   61,   57,   61,   57,  906,  902, 2195,   61,
       57, 2195,  903, 2195,  904,  905,   61,   57,   61,   57,
       61,   57,  909,  911,  912,  907,   61,   57,   61,   57,
       61,   57,  908,  915, 2195,  910, 2195,  916,  917,  914,

     2195,  913,   61,   57,  918,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,  919, 2195,   61,
       57, 2195,   61,   57,   61,   57, 2195,  920, 2195,  921,
       61,   57,   61,   57,  922,  924, 2195,  927,  923,   61,
       57, 2195,  925,   61,   57,  926,  930, 2195,  933,  928,
       61,   57,  929, 2195,  931,  932,   61,   57, 2195,  935,
       61,   57,   61,   57,  936,   61,   57,   61,   57,  934,
       61,   57,   61,   57,   61,   57,  937,   61,   57,   61,
       57,   61,   57,  940,   61,   57,   61,   57, 2195,  938,
       61,   57,   61,   57,   61,   57,   61,   57, 2195,  939,

     2195,  945,  941,  942, 2195,  943,   61,   57,   61,   57,
       61,   57,  944, 2195,  947,  946,  949,   61,   57,  950,
       61,   57,   61,   57,   61,   57, 2195,  948,  951,   61,
       57,  953,   61,   57,   61,   57,   61,   57,   61,   57,
      956, 2195,  957,  952,   61,   57, 2195,  954,   61,   57,
       61,   57,   61,   57,   61,   57,  960,  955,   61,   57,
      962,   61,   57,  958,   61,   57,   61,   57,  959,   61,
       57,  975,  963, 2195,  961,  967,   61,   57,  964,   61,
       57,  965,  971,   61,   57,  972, 2195,  968,  974,  966,
      969, 2195,  970,  973,   61,   57,   61,   57,   61,   57,

       61,   57, 2195,  978,   61,   57,  976,   61,   57,   61,
       57,   61,   57,  977,  980,   61,   57,  979,   61,   57,
       61,   57, 2195,  983,   61,   57,   61,   57, 2195,  986,
       61,   57,   61,   57,  985,  982, 2195,  981, 2195,  988,
     2195,  984,   61,   57,  990,   61,   57,   61,   57,  989,
      987,  991,   61,   57, 2195,  993,   61,   57,  992,   61,
       57, 2195,  994,   61,   57,   61,   57, 2195,   61,   57,
       61,   57,  997,   61,   57, 2195,  999,  995,   61,   57,
      996,   61,   57,  998,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57, 2195, 1000,   61,   57,

       61,   57, 1001, 1002, 2195, 1003,   61,   57, 1007,   61,
       57, 1004, 2195,   61,   57,   61,   57, 1005, 1006, 1008,
       61,   57, 2195, 1011,   61,   57, 1009,   61,   57, 1010,
     1018, 1012, 1013, 1015, 2195, 1017, 2195, 1014,   61,   57,
     2195,   61,   57, 1016,   61,   57,   61,   57,   61,   57,
     2195, 1019,   61,   57,   61,   57,   61,   57, 2195,   61,
       57, 1020,   61,   57,   61,   57, 1021,   61,   57, 1026,
     2195,   61,   57,   61,   57, 1022, 1023, 1025, 2195,   61,
       57, 2195, 1024, 1030,   61,   57,   61,   57, 1031, 2195,
     1027, 1033, 2195, 1028, 1029,   61,   57,   61,   57, 2195,

     1032,   61,   57,   61,   57,   61,   57,   61,   57, 1039,
     2195, 1034, 1035,   61,   57,   61,   57, 2195, 1036,   61,
       57, 1040, 1041, 1037,   61,   57, 2195, 1038,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 1043, 2195,
     1042, 1044, 2195,   61,   57, 2195, 1046,   61,   57, 1045,
       61,   57, 1048,   61,   57, 1049, 1047,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 1053, 2195, 1050,
       61,   57, 2195, 1051, 1052, 2195, 1055, 1054, 2195,   61,
       57, 1060,   61,   57, 2195, 1059, 2195, 1061,   61,   57,
     1057, 2195, 1058, 1056,   61,   57,   61,   57,   61,   57,

       61,   57, 1062,   61,   57, 2195,   61,   57, 2195, 1063,
     1064,   61,   57, 2195, 1068, 2195, 1065,   61,   57,   61,
       57,   61,   57,   61,   57, 1066, 1074, 2195, 1067, 1070,
       61,   57,   61,   57, 1069, 1071, 1073, 2195, 1072, 2195,
     1075,   61,   57, 2195, 1078,   61,   57,   61,   57, 2195,
     1076,   61,   57, 1077, 1079,   61,   57,   61,   57, 2195,
     1081,   61,   57, 1080, 2195, 1083,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 1082, 1084,
       61,   57,   61,   57, 1085, 2195,   61,   57, 1087, 1086,
       61,   57,   61,   57, 1093, 1088, 1090,   61,   57,   61,

       57, 2195, 1096,   61,   57, 1089, 1097, 1091, 2195, 1094,
       61,   57,   61,   57, 2195, 1092,   61,   57, 1095,   61,
       57, 2195, 1100,   61,   57,   61,   57,   61,   57, 2195,
     1099, 2195, 1098, 2195,   61,   57, 1102,   61,   57,   61,
       57,   61,   57,   61,   57, 2195, 1101,   61,   57,   61,
       57,   61,   57, 1105,   61,   57,   61,   57,   61,   57,
     1103, 1109,   61,   57, 2195, 1107, 1104, 1106, 2195,   61,
       57,   61,   57, 1108, 2195,   61,   57, 1110,   61,   57,
       61,   57, 1115, 2195, 1114, 2195, 1111,   61,   57, 2195,
     1112, 1116, 2195, 1113, 1117,   61,   57,   61,   57,   61,

       57,   61,   57, 2195,   61,   57,   61,   57,   61,   57,
     2195, 1118,   61,   57,   61,   57,   61,   57,   61,   57,
     1128,   61,   57,   61,   57, 1122, 1119, 2195, 1120, 1123,
     2195, 1121,   61,   57,   61,   57,   61,   57,   61,   57,
     2195, 1130, 1126, 2195, 1125, 2195, 1124,   61,   57,   61,
       57,   61,   57, 2195, 1131, 2195, 1127,   61,   57, 1129,
       61,   57, 1133, 1138, 1139, 1140, 1141,   61,   57, 1134,
     1132, 2195,   61,   57,   61,   57,   61,   57,   61,   57,
     1135, 2195, 1137, 1136,   61,   57, 2195,   61,   57,   61,
       57, 1142, 1143, 1156, 2195,   61,   57, 1145, 2195,   61,

       57, 1144, 1148, 1149, 1150, 1151, 2195, 1147, 2195, 1157,
       61,   57,   61,   57, 1146, 1152, 1153, 1154, 1155,   61,
       57,   61,   57,   61,   57,   61,   57, 2195, 1158, 1159,
     2195,   61,   57,   61,   57, 1160,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2195,   61,   57, 1161,   61,   57, 2195, 1163, 1162, 1164,
       61,   57,   61,   57,   61,   57,   61,   57, 1167, 1166,
     1168, 1170, 2195, 1165,   61,   57, 2195, 1169,   61,   57,
       61,   57, 1171,   61,   57, 2195,   61,   57,   61,   57,
       61,   57, 2195, 1172,   61,   57,   61,   57,   61,   57,

     2195, 1175,   61,   57, 2195, 1173, 1176, 1174, 1179, 1177,
     1178,   61,   57, 2195, 1181,   61,   57,   61,   57, 2195,
     1184,   61,   57,   61,   57, 1180,   61,   57, 2195, 1182,
     1185,   61,   57, 1183, 2195, 1187, 2195, 1189,   61,   57,
     2195, 1186,   61,   57, 2195, 1190, 2195, 1188, 2195, 1192,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     1191,   61,   57, 1193,   61,   57,   61,   57, 2195,   61,
       57,   61,   57, 2195, 1198, 1194, 1197, 1195,   61,   57,
     2195, 1196, 1200, 1199, 1202,   61,   57, 2195, 1201, 1204,
       61,   57,   61,   57,   61,   57, 2195, 1203,   61,   57,

     1206,   61,   57,   61,   57, 1205,   61,   57,   61,   57,
     1208,   61,   57,   61,   57,   61,   57, 2195,   61,   57,
       61,   57, 2195, 1207, 2195, 1212, 2195,   61,   57, 2195,
     1210,   61,   57, 1209, 1214, 1216, 1217, 2195, 1218, 1211,
       61,   57,   61,   57, 2195, 1215, 1213, 1223, 1220, 1221,
       61,   57, 1219, 2195, 1222,   61,   57,   61,   57,   61,
       57,   61,   57, 1225,   61,   57, 1224,   61,   57, 2195,
     1227,   61,   57, 2195,   61,   57,   61,   57, 2195,   61,
       57, 1226,   61,   57, 1230, 2195, 1229, 2195,   61,   57,
       61,   57,   61,   57, 1228, 2195, 1235, 2195, 1231, 1234,

       61,   57, 1232, 1233, 1237,   61,   57, 1238, 1236, 1240,
     1241,   61,   57, 2195, 1239,   61,   57,   61,   57, 2195,
     1244,   61,   57, 2195, 1242, 1243,   61,   57,   61,   57,
     2195, 1246,   61,   57, 1245,   61,   57, 1249, 2195,   61,
       57,   61,   57, 2195, 1247,   61,   57,   61,   57, 1248,
       61,   57, 1252,   61,   57, 1253,   61,   57, 1250, 1254,
       61,   57, 2195, 1255, 1251, 2195, 1258, 1256,   61,   57,
     2195, 1259,   61,   57, 1261,   61,   57,   61,   57, 2195,
     1257,   61,   57, 2195, 1262,   61,   57, 2195, 1260,   61,
       57, 2195, 1264,   61,   57, 2195, 1263,   61,   57,   61,

       57,   61,   57,   61,   57, 2195, 1265, 1266,   61,   57,
     1267,   61,   57,   61,   57,   61,   57, 1270,   61,   57,
     1268,   61,   57,   61,   57,   61,   57, 1269,   61,   57,
     2195, 1273,   61,   57, 1272, 2195, 1271,   61,   57,   61,
       57, 2195,   61,   57, 1275,   61,   57, 1274, 2195,   61,
       57, 1277, 1276,   61,   57,   61,   57, 2195, 1278,   61,
       57, 2195, 1279, 1283, 1280,   61,   57,   61,   57, 1281,
     1284, 2195, 1282, 1286,   61,   57, 2195, 1285,   61,   57,
       61,   57, 1289, 2195, 1288, 2195, 1287,   61,   57,   61,
       57, 2195,   61,   57,   61,   57,   61,   57, 1291, 2195,

       61,   57,   61,   57, 1290,   61,   57,   61,   57,   61,
       57, 2195, 1296,   61,   57, 1292,   61,   57, 2195, 1293,
     1299,   61,   57, 1295, 1297, 1298, 1294, 1301,   61,   57,
       61,   57, 2195, 1303, 2195,   61,   57,   61,   57,   61,
       57, 1300, 1302, 1308, 2195, 1305,   61,   57, 2195, 1304,
       61,   57,   61,   57, 1306, 1307,   61,   57,   61,   57,
       61,   57,   61,   57, 2195, 1309,   61,   57, 1315, 2195,
     1311,   61,   57,   61,   57,   61,   57,   61,   57, 2195,
     1310,   61,   57,   61,   57,   61,   57,   61,   57, 1316,
     1322, 1312, 1314, 1313, 2195, 1317, 2195, 1318,   61,   57,

       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     1321, 1319,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57, 1329, 2195, 1330, 1320,   61,   57, 2195,   61,
       57,   61,   57,   61,   57,   61,   57, 1323, 2195, 1324,
     2195, 1325,   61,   57, 2195, 1326, 1332, 1327,   61,   57,
     1328,   61,   57, 1335,   61,   57,   61,   57, 1331, 1333,
       61,   57,   61,   57,   61,   57, 1337, 2195, 1336, 2195,
     1334, 2195,   61,   57,   61,   57, 2195,   61,   57,   61,
       57, 2195, 1340,   61,   57, 1338,   61,   57,   61,   57,
       61,   57, 2195,   61,   57, 1339, 1343, 1345, 2195, 1341,

       61,   57, 2195, 1342,   61,   57, 2195, 1347,   61,   57,
       61,   57, 2195, 1344,   61,   57, 1346,   61,   57,   61,
       57,   61,   57, 2195, 1351,   61,   57, 1348, 1349,   61,
       57,   61,   57, 2195, 1353,   61,   57,   61,   57, 1354,
     1350,   61,   57, 1352,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 2195, 1356,   61,   57, 1355,   61,
       57,   61,   57,   61,   57,   61,   57, 2195, 1359, 2195,
     1357, 1358,   61,   57,   61,   57, 1363,   61,   57, 2195,
     1364,   61,   57, 2195, 1362, 2195, 1360, 1361,   61,   57,
       61,   57,   61,   57,   61,   57, 2195,   61,   57,   61,

       57, 2195, 1367, 2195, 1365,   61,   57,   61,   57, 2195,
       61,   57, 1366, 2195, 1368, 2195, 1369, 2195, 1370,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 1372,
     1373, 2195, 1371, 1374, 1378, 1376,   61,   57, 2195, 1377,
       61,   57, 2195,   61,   57, 1375, 2195, 1380, 1381,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 2195, 1379, 1385,   61,   57, 1382, 1383,   61,   57,
     2195, 1386, 2195, 1388, 2195, 1387,   61,   57, 2195, 1389,
     1384, 2195,   61,   57,   61,   57,   61,   57, 1392,   61,
       57,   61,   57, 1391, 1390, 2195, 1393,   61,   57, 2195,

       61,   57,   61,   57,   61,   57, 2195,   61,   57, 1394,
     1395, 1398, 1396, 2195, 1397,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2195, 1399,   61,
       57,   61,   57, 2195, 1400, 1401, 2195, 1406,   61,   57,
     2195, 1403, 1404, 1402,   61,   57, 2195, 1409, 1405,   61,
       57, 1411,   61,   57, 1408, 2195, 1407, 2195,   61,   57,
     1410, 1416, 1417, 1418, 1419,   61,   57, 2195, 1412,   61,
       57,   61,   57,   61,   57, 1413, 1415,   61,   57,   61,
       57, 1414, 2195, 1420,   61,   57, 2195, 1421, 2195,   61,
       57, 1423,   61,   57,   61,   57,   61,   57,   61,   57,

     2195, 1425, 1426, 2195,   61,   57,   61,   57, 1422, 1428,
       61,   57,   61,   57,   61,   57, 1424, 1427,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2195, 1429, 1432, 1430,   61,   57, 2195, 1431,   61,   57,
       61,   57, 2195, 1434, 2195, 1433, 1437, 2195, 1439,   61,
       57, 2195, 1435,   61,   57, 2195, 1436,   61,   57, 2195,
     1440, 1438,   61,   57,   61,   57,   61,   57, 2195, 1442,
       61,   57,   61,   57,   61,   57, 2195, 1441, 2195,   61,
       57,   61,   57,   61,   57, 2195, 1445, 2195,   61,   57,
     1443,   61,   57,   61,   57, 2195, 1444, 1447, 1446, 2195,

     1449, 1448,   61,   57,   61,   57, 1450, 1451, 1454,   61,
       57,   61,   57, 2195,   61,   57,   61,   57, 2195, 1455,
     2195, 1452, 1453,   61,   57, 1456, 1460,   61,   57,   61,
       57,   61,   57, 2195,   61,   57, 1457, 1462,   61,   57,
     2195, 1459, 1461, 2195, 1463, 2195, 1458,   61,   57,   61,
       57,   61,   57, 2195,   61,   57,   61,   57,   61,   57,
       61,   57, 2195, 1471,   61,   57, 1464, 1466,   61,   57,
       61,   57, 1468, 1470, 2195, 1467, 1465,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2195, 1469, 2195,
     1472,   61,   57,   61,   57,   61,   57,   61,   57,   61,

       57, 1473,   61,   57, 1475,   61,   57, 1474,   61,   57,
     1476, 2195,   61,   57, 2195,   61,   57, 2195,   61,   57,
       61,   57,   61,   57, 1477,   61,   57, 2195, 1478, 2195,
     1479,   61,   57,   61,   57, 2195, 1483, 1480, 1485,   61,
       57, 2195, 1481, 1484, 2195, 1482, 1486,   61,   57,   61,
       57,   61,   57, 1487, 1489,   61,   57, 2195,   61,   57,
     2195,   61,   57, 2195, 1488, 1490,   61,   57, 2195,   61,
       57, 1494,   61,   57,   61,   57, 2195, 1491,   61,   57,
       61,   57,   61,   57, 1493, 1492,   61,   57, 2195,   61,
       57,   61,   57, 2195, 1495, 1496, 1497,   61,   57,   61,

       57,   61,   57, 1500, 2195, 1498, 1499, 1501,   61,   57,
       61,   57,   61,   57,   61,   57, 1502,   61,   57, 1503,
     2195, 1508,   61,   57, 2195, 1504, 1505,   61,   57,   61,
       57, 2195, 1506,   61,   57, 1511, 2195, 1512, 2195, 1507,
     2195, 1509,   61,   57,   61,   57,   61,   57, 2195, 1510,
     1513,   61,   57, 1514,   61,   57,   61,   57,   61,   57,
       61,   57, 1515, 2195, 1516,   61,   57, 2195, 1517,   61,
       57,   61,   57,   61,   57,   61,   57, 2195, 1521, 1520,
     2195,   61,   57,   61,   57, 1518,   61,   57, 1519,   61,
       57, 2195, 1523,   61,   57, 1525,   61,   57,   61,   57,

     2195, 1522,   61,   57,   61,   57, 1527,   61,   57, 1524,
       61,   57,   61,   57, 2195,   61,   57, 1526, 1528, 1531,
       61,   57, 1529, 1535, 1530, 2195, 1533,   61,   57, 2195,
     1532, 2195, 1538, 2195, 1534, 1536,   61,   57, 1537,   61,
       57,   61,   57, 1540, 2195, 1539, 1541, 2195,   61,   57,
     2195, 1543,   61,   57, 2195, 1542,   61,   57, 2195,   61,
       57, 2195, 1544,   61,   57,   61,   57,   61,   57, 2195,
       61,   57, 1545, 1546, 1547,   61,   57,   61,   57, 2195,
       61,   57,   61,   57,   61,   57, 1550,   61,   57,   61,
       57,   61,   57,   61,   57, 1548, 1549, 1553, 2195, 1555,

     1556,   61,   57, 1551,   61,   57, 1552, 2195, 1558,   61,
       57,   61,   57,   61,   57, 1554,   61,   57,   61,   57,
     1557,   61,   57,   61,   57, 1559,   61,   57, 2195, 1561,
       61,   57,   61,   57,   61,   57, 2195,   61,   57,   61,
       57, 1563, 1562, 1560,   61,   57,   61,   57, 1567, 1568,
     1569,   61,   57,   61,   57,   61,   57, 2195, 1565,   61,
       57, 2195, 1564, 1570, 2195,   61,   57,   61,   57,   61,
       57, 1572,   61,   57, 2195, 1573, 1571, 1566,   61,   57,
     2195, 1574,   61,   57,   61,   57,   61,   57, 2195, 1578,
       61,   57, 2195,   61,   57,   61,   57, 2195, 1575, 1576,

     1580, 2195, 1577, 1579,   61,   57,   61,   57,   61,   57,
     2195, 1583, 1582, 1584,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 1581,   61,   57,   61,   57, 1585,
       61,   57,   61,   57, 1587,   61,   57, 1586,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 1612, 1589,
     1613, 1588, 1594,   61,   57, 1590,   61,   57, 1592,   61,
       57, 1593, 1595, 2195, 1591,   61,   57, 1596, 1597, 1598,
     1599, 1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608,
     1609, 1610, 1611, 1614,   61,   57,   61,   57,   61,   57,
       61,   57, 1615, 1617,   61,   57,   61,   57,   61,   57,

       61,   57, 2195,   61,   57,   61,   57, 2195, 1616,   61,
       57, 2195,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57, 1618, 1622,   61,   57,   61,   57, 2195, 1620,
       61,   57,   61,   57, 2195, 1621, 1619, 1623, 1624, 2195,
     1627,   61,   57,   61,   57, 2195,   61,   57,   61,   57,
     1626,   61,   57, 1625,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 1629,   61,   57,   61,   57, 1628,
     1631, 1630,   61,   57,   61,   57, 2195, 1632,   61,   57,
       61,   57, 1633,   61,   57,   61,   57, 1638, 1635, 2195,
       61,   57,   61,   57, 2195, 1634, 1636,   61,   57, 1637,

       61,   57, 1640,   61,   57,   61,   57,   61,   57, 1639,
     1644, 1642,   61,   57, 1641,   61,   57, 2195, 1643,   61,
       57,   61,   57,   61,   57, 1645, 1648,   61,   57,   61,
       57, 1656, 1649, 1657, 1647,   61,   57, 1651,   61,   57,
     1646, 1654,   61,   57, 1650, 1655, 2195, 1658, 2195, 1659,
       61,   57,   61,   57, 1652, 1660,   61,   57, 1653,   61,
       57, 1663, 1661,   61,   57,   61,   57,   61,   57, 2195,
     1662,   61,   57,   61,   57, 2195, 1664, 2195, 1666, 2195,
     1665,   61,   57, 1667,   61,   57,   61,   57,   61,   57,
     1669, 1668,   61,   57,   61,   57, 1678, 1679, 1680,   61,

       57,   61,   57,   61,   57, 2195, 1670, 2195,   61,   57,
     1671, 1672, 1673,   61,   57, 1684, 1685, 1686, 2195, 1676,
     2195, 1683, 2195, 1674, 2195, 1675,   61,   57,   61,   57,
       61,   57, 2195, 1681, 1687, 1677, 2195, 1682,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57, 2195, 1689, 1688,   61,   57,   61,   57, 2195,
     1690, 1693, 1692,   61,   57,   61,   57, 1691,   61,   57,
     2195,   61,   57,   61,   57, 1695,   61,   57, 1702, 1698,
     2195, 1696, 1694,   61,   57, 1697,   61,   57, 1700, 2195,
     1699, 1701,   61,   57,   61,   57,   61,   57,   61,   57,

       61,   57,   61,   57,   61,   57,   61,   57, 2195,   61,
       57,   61,   57,   61,   57,   61,   57, 2195, 1703,   61,
       57,   61,   57,   61,   57, 2195,   61,   57,   61,   57,
     1704, 1705, 1707,   61,   57, 1708,   61,   57, 2195, 1706,
     1709, 1710, 1712, 2195,   61,   57, 2195, 1715,   61,   57,
     1711,   61,   57, 2195, 1713, 1716, 2195, 1714, 1717, 1718,
       61,   57,   61,   57,   61,   57, 2195, 1719, 1720,   61,
       57, 2195, 1721,   61,   57,   61,   57,   61,   57, 1722,
       61,   57, 1723,   61,   57,   61,   57,   61,   57, 1724,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,

       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57, 2195, 1726, 1727, 1728,
     1729,   61,   57,   61,   57,   61,   57, 1730,   61,   57,
       61,   57,   61,   57, 2195, 1725, 2195,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2195,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2195, 1737, 1731,   61,   57, 1732, 1733, 1735, 1736, 1734,
     1738,   61,   57, 2195, 1741,   61,   57,   61,   57, 2195,
     1745, 2195, 1739, 1740,   61,   57, 2195, 1744, 2195, 1743,
       61,   57,   61,   57,   61,   57, 2195, 1742,   61,   57,

     2195, 1746,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57, 1748,   61,   57,   61,   57, 1747, 2195, 1755,
       61,   57,   61,   57, 1750, 2195, 1751,   61,   57,   61,
       57,   61,   57, 1749,   61,   57, 2195, 1752,   61,   57,
       61,   57,   61,   57, 1753, 2195, 1756,   61,   57, 2195,
       61,   57, 2195, 1754,   61,   57,   61,   57,   61,   57,
     2195,   61,   57, 1758, 1769, 1770, 2195, 1757, 2195, 1760,
     2195, 1759,   61,   57,   61,   57, 2195, 1761, 1764, 1767,
     2195,   61,   57, 1762, 1765, 1763, 2195, 1766,   61,   57,
       61,   57,   61,   57,   61,   57, 2195, 1768, 2195,   61,

       57,   61,   57,   61,   57, 1774, 2195,   61,   57,   61,
       57, 2195, 1771, 1772, 1773, 1775, 1777,   61,   57,   61,
       57, 2195, 1779, 1780,   61,   57, 2195, 1782,   61,   57,
     1778, 1783, 1776, 1784, 2195, 1781,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2195, 1785,   61,   57,   61,   57,   61,   57, 1786,   61,
       57, 2195, 1788, 1787,   61,   57,   61,   57,   61,   57,
       61,   57, 2195,   61,   57, 2195, 1792,   61,   57,   61,
       57, 1789,   61,   57, 1793,   61,   57, 1790,   61,   57,
     1791, 1796, 1795,   61,   57,   61,   57,   61,   57,   61,

       57, 1798, 1800, 1794, 1797, 2195, 1799,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 2195,
       61,   57,   61,   57, 1801,   61,   57, 1802, 1803,   61,
       57,   61,   57,   61,   57, 2195, 1804, 1806,   61,   57,
       61,   57, 2195, 1810, 1809, 1807, 1805, 1808, 1812, 1811,
       61,   57,   61,   57,   61,   57, 1813, 2195, 1815,   61,
       57,   61,   57, 2195, 1814,   61,   57, 2195,   61,   57,
       61,   57, 1816, 1820,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 2195, 1818, 1821, 2195, 1822,   61,
       57,   61,   57, 1817,   61,   57,   61,   57,   61,   57,

       61,   57,   61,   57, 1819,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2195, 1829,   61,   57, 2195,
       61,   57,   61,   57, 1826,   61,   57,   61,   57,   61,
       57,   61,   57, 1823,   61,   57, 1830, 2195, 1824, 1825,
     1832, 1827,   61,   57, 2195, 1833, 1828, 1834,   61,   57,
     2195, 1835,   61,   57,   61,   57, 1831, 1836,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2195,   61,
       57, 1847,   61,   57, 1837,   61,   57, 2195, 1838,   61,
       57,   61,   57,   61,   57, 1840,   61,   57, 1839,   61,
       57, 1842,   61,   57,   61,   57, 2195, 1841, 1843, 1844,

     1846, 1845,   61,   57,   61,   57,   61,   57, 2195, 1851,
       61,   57, 1849, 1852, 1848,   61,   57,   61,   57,   61,
       57,   61,   57, 2195, 1850,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2195,   61,   57, 2195, 1855,
     2195, 1853,   61,   57, 2195, 1858, 1854,   61,   57,   61,
       57, 1856, 1857,   61,   57,   61,   57, 2195, 1859,   61,
       57, 1869, 1870, 2195, 1860, 1865,   61,   57, 1861, 2195,
     1863, 2195, 1862, 1864, 1867, 1868, 1871,   61,   57,   61,
       57,   61,   57,   61,   57, 2195, 1872, 1866, 2195,   61,
       57,   61,   57,   61,   57, 2195,   61,   57,   61,   57,

       61,   57,   61,   57, 2195, 1875,   61,   57,   61,   57,
       61,   57, 1874, 1877, 2195, 1876, 1873, 1878, 1879,   61,
       57, 2195, 1881, 1880,   61,   57, 2195,   61,   57, 2195,
       61,   57,   61,   57,   61,   57, 2195,   61,   57, 2195,
     1882, 2195, 1883, 2195,   61,   57,   61,   57,   61,   57,
     1884, 1887, 2195, 1885,   61,   57, 2195, 1886, 1888, 1889,
     1890,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 1891, 1892,   61,   57,   61,   57, 2195, 1895, 2195,
     1893,   61,   57,   61,   57,   61,   57, 1894,   61,   57,
       61,   57,   61,   57, 1896,   61,   57,   61,   57, 1899,

     2195, 1897, 2195, 1898,   61,   57,   61,   57, 2195,   61,
       57,   61,   57, 2195,   61,   57,   61,   57,   61,   57,
       61,   57, 2195, 1900,   61,   57,   61,   57, 2195, 1901,
       61,   57, 1904, 1905, 2195, 1902, 1909, 1910,   61,   57,
     1912,   61,   57, 1903, 1906, 2195, 1907, 2195, 1908,   61,
       57,   61,   57,   61,   57,   61,   57, 2195, 1911,   61,
       57, 1916, 1915, 1913,   61,   57,   61,   57, 2195, 1914,
       61,   57, 2195, 1917,   61,   57,   61,   57,   61,   57,
       61,   57, 1919, 2195, 1921, 2195, 1922,   61,   57,   61,
       57, 1918, 2195, 1920,   61,   57,   61,   57,   61,   57,

       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     1923, 2195, 1924,   61,   57, 1925, 2195, 1927,   61,   57,
       61,   57, 1934, 1935, 1929,   61,   57, 1930, 1926,   61,
       57, 1936, 1937,   61,   57, 1928,   61,   57,   61,   57,
       61,   57,   61,   57, 2195, 1931,   61,   57, 2195, 1933,
     2195, 1932,   61,   57,   61,   57, 2195, 1938,   61,   57,
       61,   57, 1939, 1941,   61,   57, 1943,   61,   57,   61,
       57, 2195, 1942, 2195, 1944, 1940,   61,   57, 1947,   61,
       57,   61,   57, 1945, 2195,   61,   57,   61,   57,   61,
       57, 1948, 2195, 1946,   61,   57,   61,   57, 2195, 1951,

       61,   57,   61,   57,   61,   57,   61,   57, 2195, 1950,
     1949, 1953,   61,   57, 1952,   61,   57, 2195, 1957, 2195,
     1955,   61,   57,   61,   57, 2195, 1954, 1956, 2195, 1958,
       61,   57,   61,   57,   61,   57,   61,   57, 2195, 1959,
       61,   57, 1960,   61,   57,   61,   57,   61,   57, 2195,
     1962,   61,   57,   61,   57,   61,   57, 2195, 1963, 1961,
     1964,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 1967,   61,   57, 2195, 1969, 2195, 1965, 2195, 1966,
     2195, 1968,   61,   57, 1970, 1972, 2195, 1973, 2195, 1974,
       61,   57, 1976,   61,   57,   61,   57,   61,   57, 2195,

     1975, 1971,   61,   57,   61,   57,   61,   57,   61,   57,
     1978, 2195,   61,   57, 1977,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2195, 1980,   61,   57, 2195,
     1979, 1981,   61,   57, 2195, 1983, 1984,   61,   57, 1982,
       61,   57,   61,   57, 2195, 1988, 2195, 1987, 1986, 1985,
     2195, 1989,   61,   57,   61,   57, 1990,   61,   57,   61,
       57,   61,   57,   61,   57, 2195,   61,   57,   61,   57,
     2195,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 1995,   61,   57, 1994, 1993, 1997,   61,   57,   61,
       57, 2195, 1992,   61,   57, 1991,   61,   57, 1996, 1998,

       61,   57, 2195,   61,   57,   61,   57, 2195, 1999,   61,
       57,   61,   57, 2002, 2000, 2001, 2004,   61,   57, 2195,
       61,   57,   61,   57, 2005, 2007, 2003, 2006,   61,   57,
       61,   57,   61,   57,   61,   57, 2195, 2010,   61,   57,
     2009, 2011,   61,   57, 2008,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 2014,
     2015,   61,   57,   61,   57, 2016, 2195, 2012,   61,   57,
     2013, 2195,   61,   57, 2195, 2020,   61,   57,   61,   57,
     2017, 2195, 2018,   61,   57, 2023, 2195, 2024, 2019, 2195,
     2021, 2025, 2022,   61,   57,   61,   57, 2195, 2026,   61,

       57,   61,   57,   61,   57,   61,   57, 2027,   61,   57,
       61,   57,   61,   57,   61,   57, 2195, 2028,   61,   57,
     2195, 2031, 2195,   61,   57,   61,   57,   61,   57, 2195,
     2030,   61,   57,   61,   57, 2195, 2029,   61,   57,   61,
       57, 2195,   61,   57, 2032,   61,   57,   61,   57,   61,
       57, 2195, 2034,   61,   57,   61,   57, 2033, 2035,   61,
       57, 2195, 2036, 2195, 2038,   61,   57,   61,   57,   61,
       57, 2195, 2037, 2039, 2041, 2043, 2040,   61,   57, 2044,
       61,   57, 2195, 2047,   61,   57, 2042,   61,   57,   61,
       57, 2195, 2045,   61,   57, 2195, 2046,   61,   57, 2048,

     2049, 2195,   61,   57,   61,   57,   61,   57, 2051, 2050,
       61,   57, 2195,   61,   57, 2052,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2053, 2055,
       61,   57, 2054, 2057, 2195, 2056, 2060, 2195, 2061,   61,
       57,   61,   57,   61,   57, 2058, 2059, 2062,   61,   57,
       61,   57,   61,   57,   61,   57, 2063,   61,   57,   61,
       57, 2064,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 2065,   61,   57, 2066, 2068,   61,
       57,   61,   57, 2195, 2072, 2067,   61,   57,   61,   57,
     2071, 2069, 2195, 2074, 2195, 2073,   61,   57, 2195, 2070,

     2075,   61,   57, 2076, 2195, 2077,   61,   57, 2080, 2195,
     2079,   61,   57, 2195,   61,   57, 2078,   61,   57,   61,
       57,   61,   57,   61,   57, 2082,   61,   57,   61,   57,
       61,   57, 2195, 2083, 2085, 2081,   61,   57, 2084, 2087,
       61,   57, 2195, 2089,   61,   57,   61,   57, 2088, 2090,
     2092, 2091, 2086,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57, 2093, 2195,   61,   57,   61,   57, 2195,
     2095,   61,   57,   61,   57, 2094, 2195, 2097,   61,   57,
       61,   57, 2195,   61,   57, 2195, 2096, 2102, 2098,   61,

       57, 2100, 2103, 2101, 2099,   61,   57, 2195, 2104,   61,
       57, 2195, 2107, 2108, 2105, 2195, 2106,   61,   57, 2109,
       61,   57,   61,   57,   61,   57,   61,   57, 2195,   61,
       57,   61,   57,   61,   57, 2195, 2110,   61,   57, 2195,
     2111,   61,   57,   61,   57,   61,   57, 2113, 2115, 2114,
     2116,   61,   57,   61,   57, 2112,   61,   57, 2117,   61,
       57,   61,   57, 2119, 2195, 2118,   61,   57,   61,   57,
     2120,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57, 2121,   61,   57, 2124,   61,   57, 2123,
     2126,   61,   57,   61,   57, 2122, 2195,   61,   57, 2129,

     2125,   61,   57,   61,   57, 2127, 2131,   61,   57, 2132,
     2195, 2133, 2128, 2134,   61,   57, 2130, 2135,   61,   57,
       61,   57, 2195, 2137,   61,   57,   61,   57,   61,   57,
     2195, 2138, 2136,   61,   57,   61,   57, 2195, 2140,   61,
       57,   61,   57, 2195, 2142,   61,   57,   61,   57,   61,
       57, 2195, 2141, 2139,   61,   57, 2144,   61,   57,   61,
       57,   61,   57,   61,   57, 2143, 2195, 2146, 2145,   61,
       57, 2148,   61,   57,   61,   57, 2195, 2147,   61,   57,
     2151, 2153, 2152, 2149, 2195, 2150,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2156,   61,

       57, 2195, 2154,   61,   57,   61,   57,   61,   57, 2155,
       61,   57,   61,   57,   61,   57, 2195, 2157,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2158, 2195,
     2161,   61,   57, 2162, 2159, 2195,   61,   57, 2163, 2195,
     2160,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 2164, 2195, 2166, 2195, 2165, 2171, 2167, 2169, 2195,
     2168,   61,   57, 2170,   61,   57,   61,   57, 2195,   61,
       57,   61,   57, 2173,   61,   57, 2195, 2174,   61,   57,
     2195, 2172,   61,   57,   61,   57, 2177,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,

       57, 2176, 2175, 2178, 2195, 2179,   61,   57, 2181,   61,
       57, 2182,   61,   57,   61,   57, 2195,   61,   57,   61,
       57, 2180, 2183, 2195, 2185, 2195,   61,   57, 2184,   61,
       57, 2186, 2195, 2187,   61,   57,   61,   57, 2195, 2188,
       61,   57,   61,   57, 2195, 2189, 2192, 2195, 2195, 2195,
     2195, 2195, 2195, 2190, 2191, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2193, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2194,   50,   50,
       50,   50,   50,   50,   50,   50,   55, 2195, 2195,   55,
       55,   55,   55,   59,   59,   59,   59,   59,  114,  114,

      114,  114,  116,  116,  116,  194, 2195,  194,  287, 2195,
     2195,  287,    3, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195
    } ;

static yyconst short int yy_chk[7574] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       15,   26,   26,   27,   27,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   30,   30,  118,
       34,   34,   59,   59,  118,   37,   37,  114,  114,  139,
      139,   29,   29,   28,   28, 2197,   36,   36,  103,  103,

       27,  194,   27,   31,   31,   37,   32,   32,   34,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   28,   29,   29,   36,   29,   32,   28,   31,   29,
       32,   33,   33,   35,   35,  103,   31,   32,   38,   38,
       39,   39,   81,   81,   40,   40,   41,   41,   62,   62,
      113,   44,   44,   57,   63,   63,   55,   71,   71,   38,
       52,   39,   33,   50,   40,   35,   35,   40,   49,   33,
       41,   42,   42,   64,   64,   40,   38,   38,   40,   44,
       39,   40,   40,   66,   66,   81,  195,   62,  195,   44,
       43,   42,   43,   63,   43,   42,   71,   43,   42,    8,

       43,   42,    5,   66,   43,   42,   64,   43,   43,   43,
       42,   45,    3,   45,   45,   45,   45,   45,   45,   45,
       45,   45,   67,   67,   69,   69,   65,   65,   68,   68,
      148,  148,   72,   72,  196,   45,  196,   70,   70,   78,
       78,   67,  222,  222,   73,   73,    0,   79,   79,   45,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   65,
      148,   68,   70,   72,   73,   69,   74,   74,   75,   75,
       76,   76,   56,   60,   78,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   77,   77,   79,    0,   79,   76,
       80,   80,   60,   60,   60,   60,   60,   60,   60,  197,

       74,  197,   75,   82,   82,   76,    0,   77,   83,   83,
        0,   76,   84,   84,   85,   85,   86,   86,   87,   87,
        0,   89,   89,   80,   90,   90,   88,   88,   91,   91,
        0,   93,   93,   83,   92,   92,   94,   94,   95,   95,
       87,   89,   82,   85,   84,   88,   97,   97,   98,   98,
      102,  102,   90,   92,    0,   86,   87,    0,   96,   96,
        0,   88,   91,    0,   93,   88,   88,   93,   94,   92,
       95,   99,   99,   98,   97,   92,    0,   94,   96,  100,
      100,    0,  101,  101,  104,  104,  105,  105,   98,  108,
      108,   99,  110,  102,    0,  106,  106,    0,  100,  107,

      107,    0,  100,  109,  109,    0,  105,    0,   99,  100,
      101,    0,  101,    0,  105,  106,  110,    0,  107,  104,
      111,  111,  108,    0,  107,    0,  105,  109,  112,  112,
      110,  120,  120,  106,  122,  122,    0,  107,  123,  123,
      127,  127,  121,  121,  124,  124,    0,  112,  126,  126,
      155,  155,  129,  129,    0,  131,  131,  111,    0,  120,
      128,  128,  123,  112,  127,  132,  132,    0,  122,  112,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  121,
      130,  130,  124,  155,  128,  132,  126,  125,  125,  129,
      133,  133,  115,  117,  131,  117,  135,  135,  117,  117,

      117,  117,  117,  117,  117,  117,  117,  125,    0,  125,
      125,  133,    0,  125,  134,  134,  136,  136,  130,  137,
      137,  125,  138,  138,  140,  140,  141,  141,  142,  142,
      143,  143,    0,  135,  144,  144,  134,  145,  145,    0,
      136,    0,  137,  146,  146,  147,  147,    0,  140,    0,
      141,  149,  149,  138,  150,  150,  145,  151,  151,  152,
      152,    0,  143,  153,  153,  154,  154,  146,    0,  142,
      156,  156,  144,  157,  157,    0,  151,    0,  152,  150,
      147,    0,  153,  152,  158,  158,  159,  159,    0,  149,
      160,  160,  150,  161,  161,  157,  156,  162,  162,  156,

      163,  163,  164,  164,  154,  165,  165,  166,  166,    0,
      159,  167,  167,  160,  168,  168,  169,  169,    0,  170,
      170,  158,  164,    0,  163,  171,  171,    0,  165,  172,
      172,    0,  162,  161,  173,  173,  174,  174,  175,  175,
      166,    0,  169,  170,    0,  171,    0,  171,  171,    0,
      167,  168,  172,  173,    0,  174,  176,  176,  177,  177,
      178,  178,    0,  171,  171,  179,  179,  180,  180,  181,
      181,    0,  175,  182,  182,  183,  183,  184,  184,  178,
        0,  176,  177,  185,  185,  186,  186,  180,  187,  187,
        0,  188,  188,  181,  183,  176,  191,  191,  179,  184,

      184,  190,  190,  198,  198,  182,  192,  192,  185,    0,
      199,  199,  200,  200,    0,  184,  201,  201,  191,  184,
      193,  193,  186,  188,  202,  202,    0,  187,  188,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  199,    0,
      190,  198,    0,  192,  193,  203,  203,  204,  204,  200,
      205,  205,  206,  206,  201,  207,  207,  208,  208,    0,
      209,  209,  202,  210,  210,  211,  211,  212,  212,    0,
      213,  213,  214,  214,  205,    0,  207,    0,  215,  215,
        0,  204,    0,  206,  203,  210,  216,  216,  217,  217,
      207,  212,  218,  218,  219,  219,  208,  209,  215,  220,

      220,  221,  221,  223,  223,    0,  224,  224,    0,  211,
      213,  214,  225,  225,  226,  226,  228,  228,  219,    0,
      216,    0,  217,  220,  227,  227,    0,  223,    0,  218,
      224,  229,  229,  230,  230,  226,    0,  226,  221,  225,
      226,  231,  231,  232,  232,    0,  227,  226,    0,  226,
      235,  235,  234,  234,  238,  238,  228,  239,  239,  229,
      247,  247,  236,  236,  236,    0,  236,  240,  240,  231,
      237,  237,  243,  243,  236,  234,  236,  234,    0,  236,
      236,  236,  232,  233,  233,  234,    0,  234,  235,    0,
      234,  240,  234,  238,  239,  237,  241,  241,  242,  242,

      244,  244,  246,  246,  233,  233,  233,  233,    0,  243,
      245,  245,  248,  248,  250,  250,  233,    0,  233,  249,
      249,  233,  233,    0,  244,  251,  251,  252,  252,    0,
      241,    0,  242,  246,    0,  250,  253,  253,  245,  254,
      254,  255,  255,  249,    0,  248,  256,  256,    0,  252,
      257,  257,  258,  258,  260,  260,    0,  259,  259,  254,
      253,  261,  261,  263,  263,  265,  265,  251,  262,  262,
      264,  264,  255,  266,  266,    0,  258,    0,  257,    0,
      256,  259,  259,    0,  261,  261,  256,  258,    0,  264,
      262,  260,    0,  266,  267,  267,  268,  268,  263,    0,

      269,  269,    0,  262,    0,  265,  262,  270,  270,  271,
      271,  273,  273,    0,  267,  267,    0,  267,  272,  272,
      274,  274,    0,  275,  275,  267,  267,  276,  276,  267,
        0,  273,  267,  269,  268,  277,  277,    0,  272,  272,
      272,  278,  278,    0,  271,  279,  279,    0,  274,  280,
      280,  281,  281,    0,  277,  272,    0,  272,  275,  283,
      283,  276,    0,  278,  284,  284,  285,  285,    0,  280,
      286,  286,  288,  288,  281,  289,  289,  290,  290,  291,
      291,  293,  293,  283,  292,  292,  294,  294,  295,  295,
      296,  296,  281,  297,  297,    0,  289,    0,  284,    0,

      285,  298,  298,  299,  299,  300,  300,  286,    0,  290,
        0,  288,    0,  295,  291,  301,  301,  292,    0,  294,
      293,    0,  297,  299,  296,  298,  302,  302,  303,  303,
      304,  304,  305,  305,  306,  306,  307,  307,  308,  308,
      309,  309,    0,  300,  310,  310,    0,  311,  311,  312,
      312,  313,  313,    0,  301,  314,  314,    0,  318,  318,
        0,  302,  315,  315,  308,  306,    0,  304,    0,  307,
      316,  316,  317,  317,  319,  319,    0,  310,  309,  311,
      320,  320,  315,  321,  321,  322,  322,  312,  313,  318,
      316,    0,  317,    0,  314,    0,  317,  323,  323,    0,

      320,  324,  324,  325,  325,  326,  326,    0,  319,    0,
      316,  327,  327,  328,  328,  329,  329,  330,  330,  331,
      331,    0,  321,    0,  322,  332,  332,    0,  333,  333,
      323,  335,  335,  326,  336,  336,  326,  334,  334,    0,
      325,  328,  334,    0,  324,  327,  337,  337,  333,  338,
      338,  330,  333,  331,  339,  339,    0,  331,  329,    0,
      332,  334,  335,  340,  340,    0,  337,  337,  336,  341,
      341,  342,  342,  344,  344,  339,  338,  339,  343,  343,
      345,  345,  346,  346,  347,  347,  348,  348,  349,  349,
      350,  350,  339,  351,  351,  352,  352,  341,  353,  353,

      341,  340,  343,    0,  347,  342,  348,  344,  354,  354,
      348,  355,  355,  351,  345,    0,  346,  352,  356,  356,
      346,    0,  349,  357,  357,    0,  358,  358,  359,  359,
        0,  353,  360,  360,  354,    0,  361,  361,  362,  362,
      363,  363,  364,  364,  365,  365,  366,  366,    0,  355,
      358,  367,  367,  368,  368,  356,  370,  370,  362,    0,
      357,  369,  369,    0,  363,  371,  371,  359,    0,  360,
      361,  372,  372,  373,  373,    0,  365,  374,  374,  375,
      375,  366,    0,  367,  376,  376,  369,  370,    0,  371,
      368,  377,  377,  373,  379,  379,  374,    0,  378,  378,

      380,  380,    0,  372,  382,  382,    0,  375,    0,  383,
      383,  377,  384,  384,  372,  386,  386,  376,  378,  380,
      385,  385,  387,  387,  388,  388,  392,  392,    0,  379,
      381,  381,  383,  389,  389,  384,  391,  391,  393,  393,
        0,  382,    0,  386,  390,  390,  387,  394,  394,  386,
      381,  385,  392,  395,  395,  381,  381,  393,  388,    0,
      385,  381,  381,  381,  388,  381,  381,    0,  390,    0,
      389,  391,  396,  396,  397,  397,  398,  398,  394,  399,
      399,    0,  400,  400,  390,  401,  401,  402,  402,    0,
      403,  403,    0,  395,    0,  404,  404,    0,  397,    0,

      398,  405,  405,  406,  406,    0,  396,  400,    0,  401,
        0,  399,  403,  403,  404,  407,  407,  408,  408,  409,
      409,  410,  410,    0,  402,  403,    0,  406,  411,  411,
      412,  412,  413,  413,  414,  414,  405,  415,  415,  407,
      417,  417,  416,  416,  418,  418,    0,  410,  419,  419,
        0,  413,  409,    0,  414,  421,  421,  420,  420,    0,
      408,  415,  416,  422,  422,    0,  411,    0,  423,  423,
      424,  424,  413,  425,  425,    0,  419,  417,  420,  421,
      426,  426,  418,  427,  427,  428,  428,  429,  429,  430,
      430,    0,  425,  431,  431,  432,  432,    0,  424,    0,

      422,  423,  435,  435,  428,  433,  433,  427,  434,  434,
      436,  436,  437,  437,  426,  438,  438,  439,  439,  440,
      440,  431,  441,  441,    0,  429,  430,  445,  445,  433,
      442,  442,  434,  443,  443,  437,    0,  436,  444,  444,
        0,  435,  446,  446,  441,  447,  447,  453,  453,  439,
      448,  448,    0,  438,  449,  449,  440,  450,  450,  451,
      451,  441,  452,  452,  442,  445,  454,  454,  456,  456,
      443,  447,  453,    0,  448,  444,    0,  446,  449,    0,
      446,  455,  455,  451,  457,  457,  458,  458,  459,  459,
      450,  460,  460,  452,  461,  461,  456,  462,  462,  463,

      463,  464,  464,  465,  465,  454,  456,  466,  466,    0,
      458,    0,  457,  467,  467,  468,  468,  461,  455,  462,
        0,  459,  469,  469,    0,  465,  470,  470,    0,  471,
      471,  472,  472,  463,  460,    0,  473,  473,  464,  474,
      474,  475,  475,  476,  476,    0,  469,  467,  471,  477,
      477,  466,    0,  470,  478,  478,  479,  479,    0,  468,
      473,  480,  480,    0,  472,  481,  481,  482,  482,  476,
      474,  483,  483,    0,  484,  484,  475,  485,  485,  486,
      486,  487,  487,    0,  479,    0,  477,  488,  488,  489,
      489,    0,  478,  480,    0,  490,  490,    0,  481,  491,

      491,  492,  492,  493,  493,  482,  484,    0,  483,    0,
      482,  494,  494,  495,  495,  488,  485,  486,  487,  490,
      496,  496,  497,  497,  498,  498,    0,  489,    0,  492,
      499,  499,  500,  500,  501,  501,  491,    0,  493,  502,
      502,    0,  493,    0,  494,  503,  503,  504,  504,    0,
      495,  498,  505,  505,  506,  506,  497,  507,  507,  501,
      508,  508,    0,  502,    0,  499,    0,  503,    0,  500,
      509,  509,  510,  510,  511,  511,  506,    0,  507,  507,
      512,  512,  504,  513,  513,  514,  514,  517,  517,  507,
      509,  505,  515,  515,  516,  516,  518,  518,  508,  507,

      519,  519,    0,  513,  510,    0,  513,  512,  520,  520,
      521,  521,  511,  513,  516,  517,  518,    0,  514,    0,
      513,  522,  522,  515,    0,  523,  523,  526,  526,    0,
      524,  524,  525,  525,  519,  527,  527,  528,  528,    0,
      529,  529,  520,  530,  530,  522,    0,  531,  531,    0,
      521,  523,  520,  524,  533,  533,  525,  532,  532,  526,
        0,  534,  534,  535,  535,    0,  530,  536,  536,  537,
      537,  538,  538,  527,  541,  541,  528,  529,  531,  539,
      539,  532,  534,  540,  540,  533,  542,  542,    0,  537,
      537,  537,  537,  537,  543,  543,    0,  535,  536,  544,

      544,  537,    0,  545,  545,    0,  538,  537,  546,  546,
        0,  539,  541,    0,  540,    0,  540,    0,  543,  547,
      547,  548,  548,    0,  544,  545,  549,  549,    0,  542,
      550,  550,  551,  551,  552,  552,    0,  553,  553,  546,
      554,  554,  555,  555,  556,  556,    0,  557,  557,  548,
      559,  559,  550,  547,  560,  560,  550,  561,  561,  552,
      551,  562,  562,  549,    0,  554,    0,  563,  563,  564,
      564,  566,  566,  551,  553,  557,  565,  565,  567,  567,
      555,  556,  558,  558,    0,  560,  568,  568,    0,  559,
        0,  566,    0,  562,  561,  563,  569,  569,  570,  570,

      567,  571,  571,  558,  558,    0,  568,  558,  564,  565,
      572,  572,  573,  573,  558,  575,  575,  558,  577,  577,
      558,  558,  558,    0,  571,  571,  571,  571,  574,  574,
      576,  576,  570,  578,  578,  569,  571,    0,  572,  571,
      579,  579,    0,  573,  580,  580,  581,  581,  574,    0,
      576,    0,  577,    0,  575,  582,  582,  583,  583,  584,
      584,  585,  585,  586,  586,    0,  578,    0,  580,  587,
      587,  588,  588,  589,  589,  590,  590,  591,  591,  582,
      581,  583,    0,  586,  592,  592,  593,  593,    0,  587,
        0,  585,  594,  594,  584,  590,  595,  595,  596,  596,

      597,  597,  598,  598,    0,  589,  599,  599,    0,  588,
        0,  600,  600,  588,    0,  594,  601,  601,  596,  595,
        0,  592,  602,  602,    0,  593,  603,  603,  604,  604,
      605,  605,  607,  607,  597,  598,  600,    0,  606,  606,
      599,  608,  608,  609,  609,  610,  610,  611,  611,    0,
      610,  612,  612,  601,  602,    0,  604,    0,  607,  603,
      606,  613,  613,  608,    0,  609,    0,  611,  614,  614,
        0,  615,  615,  616,  616,  605,  617,  617,    0,  618,
      618,  620,  620,  612,  621,  621,    0,  619,  619,  622,
      622,  613,  623,  623,  624,  624,  625,  625,  617,  627,

      627,  626,  626,  628,  628,  630,  630,  614,  615,  619,
      619,    0,  616,  618,    0,  620,    0,  621,  619,  629,
      629,    0,  619,  622,  631,  631,    0,  619,  625,  626,
        0,  623,  632,  632,  633,  633,  634,  634,  628,  635,
      635,  636,  636,  630,  627,  629,  631,  637,  637,  638,
      638,  639,  639,  640,  640,  641,  641,  642,  642,    0,
      634,  636,  643,  643,  632,  644,  644,  645,  645,  646,
      646,    0,  647,  647,  648,  648,    0,  641,  635,  649,
      649,  637,  643,  639,  650,  650,  651,  651,  638,  644,
        0,  645,  647,    0,  642,  652,  652,  653,  653,  654,

      654,  655,  655,  649,    0,  648,  643,    0,  651,  646,
      656,  656,  657,  657,  658,  658,  659,  659,  660,  660,
      661,  661,  662,  662,  650,  663,  663,  664,  664,  665,
      665,  666,  666,  667,  667,  652,  668,  668,  660,  654,
      655,  661,  658,  657,  656,    0,  662,  669,  669,  670,
      670,  664,    0,  659,  671,  671,  672,  672,    0,  666,
      665,  667,  668,  663,  673,  673,  674,  674,    0,  670,
      675,  675,  676,  676,    0,  669,  677,  677,  678,  678,
      679,  679,  680,  680,    0,  681,  681,  682,  682,  672,
      683,  683,  684,  684,  671,    0,  677,    0,  675,  674,

      685,  685,  686,  686,  677,  687,  687,  673,    0,  676,
      683,  688,  688,  689,  689,  690,  690,  679,  681,    0,
      680,    0,  682,  691,  691,  692,  692,  684,  693,  693,
      694,  694,  695,  695,    0,  685,    0,  689,  696,  696,
      697,  697,  686,  688,  687,  698,  698,  699,  699,  692,
        0,  693,  700,  700,  690,  701,  701,  702,  702,  693,
        0,  691,  703,  703,  694,  698,  695,  704,  704,    0,
      696,  697,    0,  698,  705,  705,    0,  706,  706,  700,
      707,  707,  708,  708,  699,  709,  709,  710,  710,    0,
      701,  702,  711,  711,  712,  712,  705,  713,  713,    0,

      703,  714,  714,  715,  715,  716,  716,  704,  709,  717,
      717,  718,  718,  705,  706,    0,  719,  719,  720,  720,
      707,    0,  708,  721,  721,  716,    0,  710,  712,    0,
      711,  713,  714,  722,  722,    0,  715,  717,  723,  723,
      724,  724,    0,  721,  725,  725,  726,  726,    0,  718,
      719,  727,  727,  728,  728,  730,  730,  720,  729,  729,
      731,  731,  732,  732,  733,  733,  726,  722,    0,  734,
      734,    0,  723,    0,  724,  725,  735,  735,  736,  736,
      737,  737,  729,  730,  731,  727,  738,  738,  739,  739,
      740,  740,  728,  734,    0,  729,    0,  735,  736,  733,

        0,  732,  741,  741,  737,  742,  742,  743,  743,  744,
      744,  745,  745,  746,  746,  747,  747,  738,    0,  748,
      748,    0,  749,  749,  750,  750,    0,  739,    0,  740,
      751,  751,  753,  753,  741,  743,    0,  746,  742,  752,
      752,    0,  744,  754,  754,  745,  748,    0,  750,  747,
      755,  755,  747,    0,  748,  749,  756,  756,    0,  752,
      757,  757,  759,  759,  753,  758,  758,  760,  760,  751,
      761,  761,  762,  762,  764,  764,  754,  763,  763,  765,
      765,  766,  766,  757,  767,  767,  768,  768,    0,  755,
      769,  769,  770,  770,  771,  771,  772,  772,    0,  756,

        0,  766,  758,  762,    0,  763,  773,  773,  774,  774,
      775,  775,  764,    0,  768,  767,  770,  776,  776,  771,
      777,  777,  778,  778,  779,  779,    0,  769,  772,  780,
      780,  774,  781,  781,  782,  782,  783,  783,  784,  784,
      777,    0,  778,  773,  785,  785,    0,  775,  786,  786,
      787,  787,  788,  788,  791,  791,  781,  776,  789,  789,
      783,  790,  790,  779,  792,  792,  793,  793,  780,  794,
      794,  793,  784,    0,  782,  788,  795,  795,  785,  796,
      796,  786,  789,  797,  797,  790,    0,  788,  792,  787,
      788,    0,  788,  791,  798,  798,  799,  799,  800,  800,

      801,  801,    0,  796,  802,  802,  794,  803,  803,  804,
      804,  805,  805,  795,  798,  806,  806,  797,  807,  807,
      808,  808,    0,  801,  810,  810,  809,  809,    0,  804,
      811,  811,  812,  812,  803,  800,    0,  799,    0,  806,
        0,  802,  813,  813,  808,  814,  814,  815,  815,  807,
      805,  809,  816,  816,    0,  812,  818,  818,  810,  817,
      817,    0,  813,  819,  819,  820,  820,    0,  821,  821,
      823,  823,  816,  822,  822,    0,  818,  814,  824,  824,
      815,  825,  825,  817,  826,  826,  827,  827,  828,  828,
      829,  829,  830,  830,  831,  831,    0,  819,  832,  832,

      833,  833,  820,  821,    0,  822,  835,  835,  826,  837,
      837,  823,    0,  834,  834,  836,  836,  824,  825,  827,
      838,  838,    0,  830,  839,  839,  828,  840,  840,  829,
      837,  831,  832,  834,    0,  836,    0,  833,  841,  841,
        0,  842,  842,  835,  843,  843,  844,  844,  845,  845,
        0,  838,  846,  846,  847,  847,  848,  848,    0,  849,
      849,  839,  850,  850,  851,  851,  840,  852,  852,  845,
        0,  853,  853,  854,  854,  841,  842,  844,    0,  855,
      855,    0,  843,  849,  856,  856,  858,  858,  851,    0,
      846,  853,    0,  847,  848,  857,  857,  859,  859,    0,

      852,  860,  860,  861,  861,  862,  862,  863,  863,  858,
        0,  854,  855,  864,  864,  865,  865,    0,  856,  867,
      867,  859,  860,  857,  866,  866,    0,  857,  868,  868,
      869,  869,  870,  870,  871,  871,  872,  872,  863,    0,
      861,  864,    0,  873,  873,    0,  866,  874,  874,  865,
      876,  876,  868,  875,  875,  870,  867,  877,  877,  878,
      878,  879,  879,  880,  880,  881,  881,  874,    0,  871,
      882,  882,    0,  872,  873,    0,  876,  875,    0,  883,
      883,  879,  884,  884,    0,  878,    0,  880,  885,  885,
      877,    0,  877,  876,  886,  886,  887,  887,  888,  888,

      889,  889,  881,  890,  890,    0,  891,  891,    0,  882,
      883,  892,  892,    0,  886,    0,  884,  893,  893,  894,
      894,  895,  895,  896,  896,  885,  891,    0,  885,  888,
      897,  897,  898,  898,  887,  889,  890,    0,  889,    0,
      892,  899,  899,    0,  895,  900,  900,  901,  901,    0,
      893,  902,  902,  894,  896,  903,  903,  904,  904,    0,
      898,  905,  905,  897,    0,  900,  906,  906,  907,  907,
      908,  908,  909,  909,  910,  910,  911,  911,  899,  901,
      912,  912,  913,  913,  902,    0,  914,  914,  904,  903,
      915,  915,  916,  916,  910,  905,  907,  917,  917,  918,

      918,    0,  913,  919,  919,  906,  914,  908,    0,  911,
      920,  920,  921,  921,    0,  909,  922,  922,  912,  923,
      923,    0,  918,  924,  924,  925,  925,  926,  926,    0,
      917,    0,  916,    0,  927,  927,  922,  928,  928,  929,
      929,  930,  930,  931,  931,    0,  921,  932,  932,  933,
      933,  935,  935,  926,  934,  934,  936,  936,  937,  937,
      924,  930,  938,  938,    0,  928,  925,  927,    0,  939,
      939,  941,  941,  929,    0,  940,  940,  931,  942,  942,
      943,  943,  938,    0,  935,    0,  932,  944,  944,    0,
      933,  939,    0,  934,  940,  945,  945,  946,  946,  947,

      947,  948,  948,    0,  949,  949,  950,  950,  951,  951,
        0,  943,  952,  952,  953,  953,  954,  954,  956,  956,
      954,  955,  955,  957,  957,  948,  945,    0,  946,  949,
        0,  947,  958,  958,  959,  959,  960,  960,  961,  961,
        0,  956,  953,    0,  952,    0,  950,  962,  962,  963,
      963,  964,  964,    0,  957,    0,  953,  965,  965,  955,
      966,  966,  959,  966,  966,  966,  966,  967,  967,  961,
      958,    0,  968,  968,  969,  969,  970,  970,  975,  975,
      962,    0,  964,  963,  971,  971,    0,  974,  974,  976,
      976,  967,  968,  974,    0,  977,  977,  970,    0,  972,

      972,  969,  972,  972,  972,  972,    0,  971,    0,  974,
      978,  978,  973,  973,  970,  973,  973,  973,  973,  979,
      979,  980,  980,  981,  981,  982,  982,    0,  976,  977,
        0,  983,  983,  984,  984,  978,  985,  985,  986,  986,
      987,  987,  988,  988,  990,  990,  989,  989,  992,  992,
        0,  991,  991,  979,  993,  993,    0,  982,  980,  983,
      994,  994,  995,  995,  996,  996,  997,  997,  987,  986,
      989,  991,    0,  983,  998,  998,    0,  990,  999,  999,
     1000, 1000,  992, 1001, 1001,    0, 1002, 1002, 1003, 1003,
     1004, 1004,    0,  994, 1005, 1005, 1006, 1006, 1007, 1007,

        0,  999, 1008, 1008,    0,  997, 1000,  998, 1003, 1001,
     1002, 1009, 1009,    0, 1005, 1010, 1010, 1011, 1011,    0,
     1006, 1012, 1012, 1013, 1013, 1004, 1014, 1014,    0, 1005,
     1007, 1015, 1015, 1005,    0, 1009,    0, 1011, 1016, 1016,
        0, 1008, 1017, 1017,    0, 1012,    0, 1010,    0, 1014,
     1018, 1018, 1019, 1019, 1020, 1020, 1021, 1021, 1022, 1022,
     1013, 1023, 1023, 1015, 1024, 1024, 1025, 1025,    0, 1026,
     1026, 1027, 1027,    0, 1020, 1016, 1019, 1017, 1028, 1028,
        0, 1018, 1022, 1021, 1024, 1029, 1029,    0, 1023, 1026,
     1030, 1030, 1031, 1031, 1032, 1032,    0, 1025, 1033, 1033,

     1028, 1034, 1034, 1035, 1035, 1027, 1036, 1036, 1037, 1037,
     1030, 1038, 1038, 1039, 1039, 1040, 1040,    0, 1041, 1041,
     1042, 1042,    0, 1029,    0, 1035,    0, 1043, 1043,    0,
     1033, 1044, 1044, 1032, 1037, 1039, 1039,    0, 1039, 1034,
     1045, 1045, 1046, 1046,    0, 1038, 1036, 1043, 1040, 1041,
     1047, 1047, 1039,    0, 1042, 1048, 1048, 1049, 1049, 1050,
     1050, 1051, 1051, 1045, 1052, 1052, 1044, 1053, 1053,    0,
     1047, 1054, 1054,    0, 1055, 1055, 1056, 1056,    0, 1057,
     1057, 1046, 1058, 1058, 1051,    0, 1050,    0, 1059, 1059,
     1060, 1060, 1061, 1061, 1049,    0, 1056,    0, 1052, 1055,

     1062, 1062, 1053, 1054, 1057, 1064, 1064, 1058, 1056, 1059,
     1060, 1063, 1063,    0, 1058, 1065, 1065, 1066, 1066,    0,
     1062, 1067, 1067,    0, 1060, 1061, 1068, 1068, 1069, 1069,
        0, 1063, 1072, 1072, 1062, 1070, 1070, 1066,    0, 1071,
     1071, 1073, 1073,    0, 1064, 1074, 1074, 1075, 1075, 1065,
     1076, 1076, 1069, 1077, 1077, 1070, 1079, 1079, 1067, 1071,
     1078, 1078,    0, 1071, 1068,    0, 1074, 1072, 1080, 1080,
        0, 1075, 1081, 1081, 1077, 1082, 1082, 1083, 1083,    0,
     1073, 1084, 1084,    0, 1078, 1085, 1085,    0, 1076, 1086,
     1086,    0, 1080, 1087, 1087,    0, 1079, 1088, 1088, 1089,

     1089, 1090, 1090, 1091, 1091,    0, 1081, 1082, 1092, 1092,
     1083, 1093, 1093, 1094, 1094, 1095, 1095, 1088, 1096, 1096,
     1086, 1097, 1097, 1098, 1098, 1099, 1099, 1087, 1100, 1100,
        0, 1091, 1101, 1101, 1090,    0, 1089, 1102, 1102, 1103,
     1103,    0, 1104, 1104, 1093, 1105, 1105, 1092,    0, 1106,
     1106, 1096, 1094, 1107, 1107, 1108, 1108,    0, 1097, 1109,
     1109,    0, 1098, 1103, 1099, 1110, 1110, 1111, 1111, 1101,
     1104,    0, 1102, 1106, 1112, 1112,    0, 1105, 1113, 1113,
     1114, 1114, 1109,    0, 1108,    0, 1107, 1115, 1115, 1116,
     1116,    0, 1117, 1117, 1118, 1118, 1119, 1119, 1112,    0,

     1120, 1120, 1121, 1121, 1110, 1123, 1123, 1122, 1122, 1124,
     1124,    0, 1117, 1125, 1125, 1113, 1126, 1126,    0, 1114,
     1120, 1127, 1127, 1116, 1117, 1117, 1115, 1122, 1128, 1128,
     1129, 1129,    0, 1125,    0, 1130, 1130, 1132, 1132, 1131,
     1131, 1121, 1124, 1131,    0, 1127, 1133, 1133,    0, 1126,
     1134, 1134, 1135, 1135, 1129, 1130, 1136, 1136, 1137, 1137,
     1138, 1138, 1139, 1139,    0, 1132, 1140, 1140, 1138,    0,
     1134, 1141, 1141, 1142, 1142, 1143, 1143, 1144, 1144,    0,
     1133, 1145, 1145, 1146, 1146, 1147, 1147, 1148, 1148, 1139,
     1147, 1135, 1137, 1136,    0, 1142,    0, 1143, 1149, 1149,

     1150, 1150, 1151, 1151, 1152, 1152, 1153, 1153, 1154, 1154,
     1146, 1144, 1155, 1155, 1156, 1156, 1157, 1157, 1158, 1158,
     1159, 1159, 1158,    0, 1158, 1145, 1160, 1160,    0, 1161,
     1161, 1162, 1162, 1163, 1163, 1164, 1164, 1152,    0, 1153,
        0, 1154, 1165, 1165,    0, 1155, 1160, 1156, 1166, 1166,
     1157, 1167, 1167, 1163, 1168, 1168, 1169, 1169, 1159, 1161,
     1170, 1170, 1171, 1171, 1172, 1172, 1165,    0, 1164,    0,
     1162,    0, 1173, 1173, 1174, 1174,    0, 1175, 1175, 1176,
     1176,    0, 1170, 1177, 1177, 1167, 1178, 1178, 1179, 1179,
     1180, 1180,    0, 1181, 1181, 1169, 1173, 1175,    0, 1171,

     1182, 1182,    0, 1172, 1183, 1183,    0, 1177, 1184, 1184,
     1185, 1185,    0, 1174, 1186, 1186, 1176, 1187, 1187, 1188,
     1188, 1189, 1189,    0, 1183, 1190, 1190, 1179, 1181, 1191,
     1191, 1192, 1192,    0, 1185, 1193, 1193, 1194, 1194, 1188,
     1182, 1195, 1195, 1184, 1196, 1196, 1197, 1197, 1198, 1198,
     1199, 1199, 1200, 1200,    0, 1192, 1201, 1201, 1189, 1202,
     1202, 1203, 1203, 1204, 1204, 1205, 1205,    0, 1196,    0,
     1193, 1194, 1206, 1206, 1207, 1207, 1201, 1208, 1208,    0,
     1202, 1209, 1209,    0, 1200,    0, 1198, 1199, 1210, 1210,
     1211, 1211, 1212, 1212, 1213, 1213,    0, 1214, 1214, 1215,

     1215,    0, 1207,    0, 1205, 1216, 1216, 1217, 1217,    0,
     1219, 1219, 1206,    0, 1208,    0, 1210,    0, 1211, 1218,
     1218, 1220, 1220, 1221, 1221, 1222, 1222, 1223, 1223, 1213,
     1214,    0, 1212, 1215, 1219, 1217, 1224, 1224,    0, 1218,
     1225, 1225,    0, 1226, 1226, 1216,    0, 1221, 1222, 1227,
     1227, 1228, 1228, 1229, 1229, 1230, 1230, 1231, 1231, 1232,
     1232,    0, 1220, 1226, 1233, 1233, 1223, 1224, 1234, 1234,
        0, 1227,    0, 1229,    0, 1228, 1235, 1235,    0, 1230,
     1225,    0, 1236, 1236, 1237, 1237, 1238, 1238, 1233, 1240,
     1240, 1239, 1239, 1232, 1231,    0, 1234, 1241, 1241,    0,

     1242, 1242, 1243, 1243, 1244, 1244,    0, 1245, 1245, 1235,
     1236, 1239, 1237,    0, 1238, 1246, 1246, 1247, 1247, 1248,
     1248, 1249, 1249, 1250, 1250, 1251, 1251,    0, 1240, 1252,
     1252, 1253, 1253,    0, 1241, 1242,    0, 1247, 1254, 1254,
        0, 1244, 1245, 1243, 1255, 1255,    0, 1250, 1246, 1256,
     1256, 1252, 1258, 1258, 1249,    0, 1248,    0, 1257, 1257,
     1251, 1257, 1257, 1257, 1257, 1259, 1259,    0, 1253, 1260,
     1260, 1261, 1261, 1262, 1262, 1254, 1256, 1263, 1263, 1264,
     1264, 1255,    0, 1258, 1265, 1265,    0, 1259,    0, 1266,
     1266, 1261, 1267, 1267, 1268, 1268, 1269, 1269, 1270, 1270,

        0, 1263, 1264,    0, 1271, 1271, 1272, 1272, 1260, 1266,
     1273, 1273, 1274, 1274, 1276, 1276, 1262, 1265, 1275, 1275,
     1277, 1277, 1278, 1278, 1279, 1279, 1280, 1280, 1281, 1281,
        0, 1267, 1271, 1269, 1282, 1282,    0, 1270, 1283, 1283,
     1284, 1284,    0, 1273,    0, 1272, 1277,    0, 1279, 1285,
     1285,    0, 1274, 1286, 1286,    0, 1275, 1287, 1287,    0,
     1283, 1278, 1288, 1288, 1289, 1289, 1290, 1290,    0, 1285,
     1291, 1291, 1292, 1292, 1293, 1293,    0, 1284,    0, 1294,
     1294, 1295, 1295, 1296, 1296,    0, 1288,    0, 1297, 1297,
     1286, 1298, 1298, 1299, 1299,    0, 1287, 1290, 1289,    0,

     1292, 1291, 1300, 1300, 1302, 1302, 1293, 1294, 1297, 1301,
     1301, 1303, 1303,    0, 1304, 1304, 1305, 1305,    0, 1298,
        0, 1295, 1296, 1306, 1306, 1298, 1302, 1307, 1307, 1308,
     1308, 1309, 1309,    0, 1310, 1310, 1299, 1304, 1311, 1311,
        0, 1301, 1303,    0, 1305,    0, 1300, 1312, 1312, 1313,
     1313, 1314, 1314,    0, 1315, 1315, 1316, 1316, 1317, 1317,
     1318, 1318,    0, 1317, 1319, 1319, 1307, 1310, 1320, 1320,
     1321, 1321, 1313, 1315,    0, 1311, 1309, 1322, 1322, 1323,
     1323, 1324, 1324, 1325, 1325, 1326, 1326,    0, 1314,    0,
     1318, 1327, 1327, 1328, 1328, 1329, 1329, 1330, 1330, 1331,

     1331, 1319, 1332, 1332, 1321, 1333, 1333, 1320, 1334, 1334,
     1322,    0, 1335, 1335,    0, 1336, 1336,    0, 1337, 1337,
     1338, 1338, 1339, 1339, 1328, 1340, 1340,    0, 1329,    0,
     1330, 1341, 1341, 1342, 1342,    0, 1334, 1331, 1336, 1343,
     1343,    0, 1332, 1335,    0, 1333, 1337, 1344, 1344, 1345,
     1345, 1346, 1346, 1338, 1341, 1347, 1347,    0, 1348, 1348,
        0, 1349, 1349,    0, 1340, 1342, 1350, 1350,    0, 1351,
     1351, 1346, 1352, 1352, 1353, 1353,    0, 1343, 1354, 1354,
     1355, 1355, 1356, 1356, 1345, 1344, 1357, 1357,    0, 1358,
     1358, 1359, 1359,    0, 1347, 1348, 1349, 1360, 1360, 1361,

     1361, 1362, 1362, 1352,    0, 1350, 1351, 1353, 1363, 1363,
     1364, 1364, 1365, 1365, 1366, 1366, 1354, 1367, 1367, 1356,
        0, 1362, 1368, 1368,    0, 1357, 1358, 1369, 1369, 1371,
     1371,    0, 1360, 1370, 1370, 1366,    0, 1367,    0, 1361,
        0, 1364, 1372, 1372, 1373, 1373, 1374, 1374,    0, 1365,
     1369, 1375, 1375, 1370, 1376, 1376, 1377, 1377, 1378, 1378,
     1379, 1379, 1371,    0, 1372, 1380, 1380,    0, 1373, 1381,
     1381, 1382, 1382, 1383, 1383, 1384, 1384,    0, 1377, 1376,
        0, 1385, 1385, 1386, 1386, 1374, 1387, 1387, 1375, 1388,
     1388,    0, 1379, 1389, 1389, 1382, 1390, 1390, 1391, 1391,

        0, 1378, 1392, 1392, 1394, 1394, 1384, 1393, 1393, 1381,
     1395, 1395, 1396, 1396,    0, 1397, 1397, 1383, 1385, 1388,
     1398, 1398, 1386, 1391, 1387,    0, 1390, 1399, 1399,    0,
     1389,    0, 1394,    0, 1390, 1392, 1400, 1400, 1393, 1401,
     1401, 1402, 1402, 1396,    0, 1395, 1397,    0, 1403, 1403,
        0, 1399, 1404, 1404,    0, 1398, 1405, 1405,    0, 1406,
     1406,    0, 1400, 1407, 1407, 1408, 1408, 1409, 1409,    0,
     1410, 1410, 1402, 1402, 1403, 1411, 1411, 1412, 1412,    0,
     1413, 1413, 1414, 1414, 1415, 1415, 1407, 1416, 1416, 1417,
     1417, 1418, 1418, 1419, 1419, 1405, 1406, 1410,    0, 1412,

     1413, 1420, 1420, 1408, 1421, 1421, 1409,    0, 1415, 1422,
     1422, 1423, 1423, 1424, 1424, 1411, 1425, 1425, 1426, 1426,
     1414, 1427, 1427, 1428, 1428, 1420, 1429, 1429,    0, 1422,
     1430, 1430, 1431, 1431, 1432, 1432,    0, 1434, 1434, 1435,
     1435, 1426, 1423, 1421, 1433, 1433, 1436, 1436, 1433, 1433,
     1433, 1437, 1437, 1438, 1438, 1439, 1439,    0, 1429, 1440,
     1440,    0, 1428, 1434,    0, 1441, 1441, 1442, 1442, 1443,
     1443, 1436, 1444, 1444,    0, 1437, 1435, 1432, 1445, 1445,
        0, 1438, 1446, 1446, 1447, 1447, 1448, 1448,    0, 1443,
     1449, 1449,    0, 1450, 1450, 1451, 1451,    0, 1440, 1441,

     1445,    0, 1442, 1444, 1452, 1452, 1453, 1453, 1454, 1454,
        0, 1449, 1447, 1450, 1455, 1455, 1456, 1456, 1457, 1457,
     1458, 1458, 1459, 1459, 1446, 1460, 1460, 1461, 1461, 1451,
     1462, 1462, 1464, 1464, 1453, 1463, 1463, 1452, 1465, 1465,
     1467, 1467, 1469, 1469, 1470, 1470, 1471, 1471, 1470, 1456,
     1470, 1454, 1464, 1473, 1473, 1458, 1475, 1475, 1462, 1472,
     1472, 1463, 1465,    0, 1460, 1466, 1466, 1466, 1466, 1466,
     1466, 1466, 1466, 1466, 1466, 1468, 1468, 1468, 1468, 1468,
     1468, 1468, 1468, 1472, 1474, 1474, 1476, 1476, 1477, 1477,
     1478, 1478, 1473, 1475, 1479, 1479, 1480, 1480, 1481, 1481,

     1482, 1482,    0, 1483, 1483, 1484, 1484,    0, 1474, 1485,
     1485,    0, 1486, 1486, 1487, 1487, 1488, 1488, 1489, 1489,
     1490, 1490, 1477, 1483, 1491, 1491, 1492, 1492,    0, 1481,
     1493, 1493, 1494, 1494,    0, 1482, 1480, 1485, 1486,    0,
     1490, 1495, 1495, 1496, 1496,    0, 1497, 1497, 1498, 1498,
     1488, 1499, 1499, 1487, 1500, 1500, 1501, 1501, 1502, 1502,
     1503, 1503, 1504, 1504, 1494, 1505, 1505, 1506, 1506, 1493,
     1497, 1496, 1507, 1507, 1508, 1508,    0, 1499, 1509, 1509,
     1510, 1510, 1500, 1511, 1511, 1512, 1512, 1506, 1502,    0,
     1513, 1513, 1514, 1514,    0, 1501, 1504, 1515, 1515, 1505,

     1516, 1516, 1509, 1517, 1517, 1518, 1518, 1519, 1519, 1508,
     1513, 1511, 1520, 1520, 1510, 1521, 1521,    0, 1512, 1522,
     1522, 1523, 1523, 1524, 1524, 1514, 1517, 1525, 1525, 1529,
     1529, 1525, 1518, 1525, 1516, 1528, 1528, 1520, 1530, 1530,
     1515, 1523, 1526, 1526, 1519, 1524,    0, 1525,    0, 1525,
     1527, 1527, 1531, 1531, 1521, 1525, 1532, 1532, 1522, 1533,
     1533, 1528, 1526, 1534, 1534, 1535, 1535, 1536, 1536,    0,
     1527, 1537, 1537, 1538, 1538,    0, 1530,    0, 1532,    0,
     1531, 1539, 1539, 1533, 1540, 1540, 1541, 1541, 1542, 1542,
     1535, 1534, 1543, 1543, 1544, 1544, 1544, 1544, 1544, 1545,

     1545, 1546, 1546, 1548, 1548,    0, 1536,    0, 1549, 1549,
     1537, 1538, 1539, 1547, 1547, 1547, 1547, 1547,    0, 1542,
        0, 1546,    0, 1540,    0, 1541, 1550, 1550, 1551, 1551,
     1552, 1552,    0, 1545, 1549, 1543,    0, 1545, 1553, 1553,
     1554, 1554, 1555, 1555, 1556, 1556, 1557, 1557, 1558, 1558,
     1559, 1559,    0, 1551, 1550, 1560, 1560, 1561, 1561,    0,
     1551, 1554, 1553, 1562, 1562, 1564, 1564, 1552, 1563, 1563,
        0, 1565, 1565, 1566, 1566, 1556, 1567, 1567, 1566, 1560,
        0, 1557, 1555, 1568, 1568, 1558, 1569, 1569, 1563,    0,
     1561, 1565, 1570, 1570, 1571, 1571, 1572, 1572, 1573, 1573,

     1574, 1574, 1576, 1576, 1575, 1575, 1577, 1577,    0, 1578,
     1578, 1580, 1580, 1579, 1579, 1583, 1583,    0, 1571, 1581,
     1581, 1582, 1582, 1584, 1584,    0, 1585, 1585, 1586, 1586,
     1572, 1573, 1575, 1587, 1587, 1576, 1588, 1588,    0, 1574,
     1578, 1579, 1581,    0, 1589, 1589,    0, 1582, 1590, 1590,
     1580, 1591, 1591,    0, 1581, 1583,    0, 1581, 1584, 1585,
     1592, 1592, 1593, 1593, 1594, 1594,    0, 1586, 1589, 1595,
     1595,    0, 1590, 1596, 1596, 1597, 1597, 1598, 1598, 1591,
     1599, 1599, 1592, 1600, 1600, 1601, 1601, 1602, 1602, 1593,
     1603, 1603, 1604, 1604, 1605, 1605, 1606, 1606, 1607, 1607,

     1608, 1608, 1609, 1609, 1610, 1610, 1611, 1611, 1612, 1612,
     1613, 1613, 1614, 1614, 1615, 1615,    0, 1615, 1615, 1615,
     1615, 1616, 1616, 1617, 1617, 1619, 1619, 1616, 1618, 1618,
     1620, 1620, 1621, 1621,    0, 1614,    0, 1622, 1622, 1623,
     1623, 1625, 1625, 1624, 1624, 1626, 1626,    0, 1627, 1627,
     1628, 1628, 1629, 1629, 1630, 1630, 1631, 1631, 1633, 1633,
        0, 1623, 1617, 1632, 1632, 1618, 1619, 1621, 1622, 1620,
     1624, 1634, 1634,    0, 1628, 1635, 1635, 1636, 1636,    0,
     1633,    0, 1626, 1627, 1637, 1637,    0, 1632,    0, 1631,
     1638, 1638, 1639, 1639, 1640, 1640,    0, 1630, 1641, 1641,

        0, 1636, 1642, 1642, 1643, 1643, 1644, 1644, 1645, 1645,
     1646, 1646, 1638, 1647, 1647, 1648, 1648, 1637,    0, 1648,
     1649, 1649, 1650, 1650, 1642,    0, 1643, 1651, 1651, 1652,
     1652, 1653, 1653, 1641, 1654, 1654,    0, 1644, 1655, 1655,
     1656, 1656, 1657, 1657, 1645,    0, 1650, 1658, 1658,    0,
     1659, 1659,    0, 1647, 1660, 1660, 1661, 1661, 1662, 1662,
        0, 1663, 1663, 1652, 1663, 1663,    0, 1651,    0, 1654,
        0, 1653, 1664, 1664, 1665, 1665,    0, 1655, 1658, 1661,
        0, 1666, 1666, 1656, 1659, 1657,    0, 1660, 1667, 1667,
     1668, 1668, 1669, 1669, 1670, 1670,    0, 1662,    0, 1671,

     1671, 1672, 1672, 1673, 1673, 1665,    0, 1674, 1674, 1675,
     1675,    0, 1664, 1664, 1664, 1666, 1668, 1676, 1676, 1677,
     1677,    0, 1670, 1671, 1678, 1678,    0, 1673, 1679, 1679,
     1669, 1674, 1667, 1675,    0, 1672, 1680, 1680, 1681, 1681,
     1682, 1682, 1683, 1683, 1684, 1684, 1685, 1685, 1686, 1686,
        0, 1676, 1687, 1687, 1688, 1688, 1690, 1690, 1677, 1689,
     1689,    0, 1682, 1681, 1691, 1691, 1692, 1692, 1693, 1693,
     1694, 1694,    0, 1695, 1695,    0, 1690, 1696, 1696, 1698,
     1698, 1683, 1697, 1697, 1691, 1699, 1699, 1688, 1700, 1700,
     1689, 1694, 1693, 1701, 1701, 1702, 1702, 1703, 1703, 1704,

     1704, 1696, 1698, 1692, 1695,    0, 1697, 1705, 1705, 1706,
     1706, 1707, 1707, 1709, 1709, 1708, 1708, 1710, 1710,    0,
     1712, 1712, 1713, 1713, 1699, 1711, 1711, 1700, 1701, 1714,
     1714, 1715, 1715, 1716, 1716,    0, 1704, 1706, 1717, 1717,
     1718, 1718,    0, 1710, 1709, 1707, 1705, 1708, 1712, 1711,
     1719, 1719, 1720, 1720, 1721, 1721, 1713,    0, 1715, 1722,
     1722, 1723, 1723,    0, 1714, 1724, 1724,    0, 1725, 1725,
     1726, 1726, 1716, 1725, 1727, 1727, 1728, 1728, 1729, 1729,
     1730, 1730, 1731, 1731,    0, 1723, 1731,    0, 1731, 1732,
     1732, 1733, 1733, 1722, 1734, 1734, 1735, 1735, 1736, 1736,

     1737, 1737, 1738, 1738, 1724, 1739, 1739, 1740, 1740, 1741,
     1741, 1742, 1742, 1743, 1743,    0, 1742, 1744, 1744,    0,
     1745, 1745, 1746, 1746, 1737, 1747, 1747, 1748, 1748, 1749,
     1749, 1750, 1750, 1735, 1751, 1751, 1743,    0, 1736, 1736,
     1745, 1738, 1752, 1752,    0, 1746, 1741, 1747, 1753, 1753,
        0, 1748, 1754, 1754, 1755, 1755, 1744, 1749, 1756, 1756,
     1757, 1757, 1758, 1758, 1759, 1759, 1761, 1761,    0, 1760,
     1760, 1761, 1762, 1762, 1751, 1763, 1763,    0, 1752, 1764,
     1764, 1765, 1765, 1766, 1766, 1754, 1767, 1767, 1753, 1768,
     1768, 1756, 1769, 1769, 1770, 1770,    0, 1755, 1757, 1758,

     1760, 1759, 1771, 1771, 1772, 1772, 1773, 1773,    0, 1767,
     1774, 1774, 1765, 1768, 1764, 1775, 1775, 1776, 1776, 1777,
     1777, 1778, 1778,    0, 1766, 1779, 1779, 1780, 1780, 1781,
     1781, 1782, 1782, 1783, 1783,    0, 1784, 1784,    0, 1776,
        0, 1774, 1785, 1785,    0, 1778, 1775, 1786, 1786, 1787,
     1787, 1776, 1777, 1790, 1790, 1788, 1788,    0, 1779, 1789,
     1789, 1789, 1789,    0, 1780, 1785, 1791, 1791, 1781,    0,
     1783,    0, 1782, 1784, 1787, 1788, 1790, 1792, 1792, 1793,
     1793, 1794, 1794, 1795, 1795,    0, 1791, 1786,    0, 1796,
     1796, 1799, 1799, 1797, 1797,    0, 1798, 1798, 1800, 1800,

     1801, 1801, 1802, 1802,    0, 1794, 1803, 1803, 1804, 1804,
     1805, 1805, 1793, 1796,    0, 1795, 1792, 1797, 1798, 1806,
     1806,    0, 1802, 1799, 1807, 1807,    0, 1808, 1808,    0,
     1809, 1809, 1810, 1810, 1812, 1812,    0, 1811, 1811,    0,
     1804,    0, 1805,    0, 1813, 1813, 1814, 1814, 1815, 1815,
     1805, 1808,    0, 1806, 1816, 1816,    0, 1807, 1809, 1810,
     1811, 1817, 1817, 1818, 1818, 1819, 1819, 1820, 1820, 1821,
     1821, 1812, 1813, 1822, 1822, 1823, 1823,    0, 1816,    0,
     1814, 1824, 1824, 1825, 1825, 1826, 1826, 1815, 1827, 1827,
     1828, 1828, 1829, 1829, 1817, 1830, 1830, 1831, 1831, 1823,

        0, 1818,    0, 1819, 1832, 1832, 1833, 1833,    0, 1834,
     1834, 1835, 1835,    0, 1836, 1836, 1837, 1837, 1838, 1838,
     1839, 1839,    0, 1826, 1840, 1840, 1841, 1841,    0, 1828,
     1842, 1842, 1833, 1834,    0, 1831, 1836, 1837, 1843, 1843,
     1839, 1844, 1844, 1832, 1835,    0, 1835,    0, 1835, 1845,
     1845, 1846, 1846, 1847, 1847, 1848, 1848,    0, 1838, 1849,
     1849, 1844, 1843, 1840, 1850, 1850, 1851, 1851,    0, 1842,
     1852, 1852,    0, 1845, 1853, 1853, 1854, 1854, 1855, 1855,
     1856, 1856, 1848,    0, 1850,    0, 1850, 1857, 1857, 1858,
     1858, 1846,    0, 1849, 1859, 1859, 1860, 1860, 1861, 1861,

     1862, 1862, 1863, 1863, 1864, 1864, 1865, 1865, 1866, 1866,
     1854,    0, 1855, 1867, 1867, 1856,    0, 1859, 1868, 1868,
     1869, 1869, 1869, 1869, 1862, 1874, 1874, 1865, 1858, 1870,
     1870, 1870, 1870, 1871, 1871, 1861, 1872, 1872, 1873, 1873,
     1875, 1875, 1877, 1877,    0, 1866, 1876, 1876,    0, 1868,
        0, 1867, 1878, 1878, 1879, 1879,    0, 1871, 1880, 1880,
     1881, 1881, 1872, 1874, 1882, 1882, 1876, 1883, 1883, 1884,
     1884,    0, 1875,    0, 1877, 1873, 1885, 1885, 1880, 1886,
     1886, 1887, 1887, 1878,    0, 1888, 1888, 1889, 1889, 1890,
     1890, 1883,    0, 1879, 1891, 1891, 1892, 1892,    0, 1886,

     1893, 1893, 1894, 1894, 1895, 1895, 1896, 1896,    0, 1885,
     1884, 1888, 1897, 1897, 1887, 1898, 1898,    0, 1891,    0,
     1890, 1899, 1899, 1900, 1900,    0, 1889, 1890,    0, 1892,
     1901, 1901, 1902, 1902, 1903, 1903, 1904, 1904,    0, 1893,
     1905, 1905, 1895, 1906, 1906, 1907, 1907, 1908, 1908,    0,
     1901, 1909, 1909, 1910, 1910, 1911, 1911,    0, 1903, 1899,
     1904, 1912, 1912, 1913, 1913, 1914, 1914, 1915, 1915, 1916,
     1916, 1908, 1917, 1917,    0, 1911,    0, 1906,    0, 1907,
        0, 1910, 1918, 1918, 1912, 1914,    0, 1915,    0, 1916,
     1919, 1919, 1917, 1920, 1920, 1921, 1921, 1922, 1922,    0,

     1916, 1913, 1923, 1923, 1924, 1924, 1925, 1925, 1926, 1926,
     1919,    0, 1927, 1927, 1918, 1928, 1928, 1929, 1929, 1930,
     1930, 1931, 1931, 1934, 1934,    0, 1921, 1932, 1932,    0,
     1920, 1922, 1933, 1933,    0, 1924, 1927, 1935, 1935, 1923,
     1936, 1936, 1937, 1937,    0, 1931,    0, 1930, 1929, 1928,
        0, 1932, 1938, 1938, 1939, 1939, 1933, 1940, 1940, 1941,
     1941, 1942, 1942, 1943, 1943,    0, 1944, 1944, 1945, 1945,
        0, 1946, 1946, 1947, 1947, 1948, 1948, 1949, 1949, 1950,
     1950, 1942, 1951, 1951, 1941, 1940, 1944, 1952, 1952, 1953,
     1953,    0, 1939, 1954, 1954, 1938, 1955, 1955, 1943, 1946,

     1956, 1956,    0, 1957, 1957, 1958, 1958,    0, 1947, 1959,
     1959, 1960, 1960, 1951, 1948, 1949, 1953, 1961, 1961,    0,
     1962, 1962, 1963, 1963, 1955, 1957, 1952, 1956, 1964, 1964,
     1965, 1965, 1966, 1966, 1967, 1967,    0, 1961, 1968, 1968,
     1959, 1962, 1969, 1969, 1958, 1970, 1970, 1971, 1971, 1972,
     1972, 1973, 1973, 1974, 1974, 1975, 1975, 1977, 1977, 1967,
     1968, 1976, 1976, 1980, 1980, 1969,    0, 1965, 1978, 1978,
     1966,    0, 1979, 1979,    0, 1975, 1981, 1981, 1982, 1982,
     1972,    0, 1973, 1983, 1983, 1977,    0, 1978, 1974,    0,
     1975, 1979, 1976, 1984, 1984, 1985, 1985,    0, 1980, 1986,

     1986, 1987, 1987, 1988, 1988, 1989, 1989, 1981, 1990, 1990,
     1991, 1991, 1992, 1992, 1993, 1993,    0, 1983, 1994, 1994,
        0, 1987,    0, 1995, 1995, 1996, 1996, 1997, 1997,    0,
     1985, 1998, 1998, 1999, 1999,    0, 1984, 2000, 2000, 2001,
     2001,    0, 2003, 2003, 1989, 2002, 2002, 2004, 2004, 2005,
     2005,    0, 1994, 2007, 2007, 2009, 2009, 1993, 1995, 2006,
     2006,    0, 1997,    0, 2000, 2008, 2008, 2010, 2010, 2011,
     2011,    0, 1998, 2001, 2003, 2005, 2002, 2012, 2012, 2006,
     2013, 2013,    0, 2009, 2014, 2014, 2004, 2015, 2015, 2016,
     2016,    0, 2007, 2017, 2017,    0, 2008, 2018, 2018, 2010,

     2011,    0, 2019, 2019, 2020, 2020, 2021, 2021, 2013, 2012,
     2022, 2022,    0, 2023, 2023, 2014, 2024, 2024, 2025, 2025,
     2026, 2026, 2027, 2027, 2028, 2028, 2029, 2029, 2017, 2019,
     2030, 2030, 2018, 2021,    0, 2020, 2024,    0, 2025, 2031,
     2031, 2032, 2032, 2033, 2033, 2022, 2023, 2026, 2034, 2034,
     2035, 2035, 2036, 2036, 2037, 2037, 2027, 2038, 2038, 2039,
     2039, 2028, 2040, 2040, 2041, 2041, 2042, 2042, 2043, 2043,
     2044, 2044, 2045, 2045, 2030, 2046, 2046, 2031, 2037, 2047,
     2047, 2048, 2048,    0, 2041, 2034, 2049, 2049, 2050, 2050,
     2040, 2038,    0, 2044,    0, 2043, 2051, 2051,    0, 2039,

     2045, 2052, 2052, 2046,    0, 2047, 2053, 2053, 2050,    0,
     2049, 2054, 2054,    0, 2055, 2055, 2048, 2056, 2056, 2057,
     2057, 2058, 2058, 2059, 2059, 2052, 2060, 2060, 2061, 2061,
     2062, 2062,    0, 2053, 2055, 2051, 2063, 2063, 2054, 2057,
     2064, 2064,    0, 2059, 2065, 2065, 2066, 2066, 2058, 2060,
     2062, 2061, 2056, 2067, 2067, 2068, 2068, 2069, 2069, 2070,
     2070, 2071, 2071, 2072, 2072, 2073, 2073, 2074, 2074, 2075,
     2075, 2076, 2076, 2063,    0, 2077, 2077, 2078, 2078,    0,
     2069, 2079, 2079, 2080, 2080, 2067,    0, 2071, 2081, 2081,
     2082, 2082,    0, 2083, 2083,    0, 2070, 2076, 2072, 2084,

     2084, 2074, 2077, 2075, 2073, 2085, 2085,    0, 2078, 2086,
     2086,    0, 2082, 2083, 2080,    0, 2081, 2087, 2087, 2084,
     2088, 2088, 2089, 2089, 2090, 2090, 2091, 2091,    0, 2092,
     2092, 2093, 2093, 2094, 2094,    0, 2086, 2095, 2095,    0,
     2088, 2096, 2096, 2097, 2097, 2098, 2098, 2090, 2092, 2091,
     2093, 2099, 2099, 2100, 2100, 2089, 2101, 2101, 2094, 2102,
     2102, 2103, 2103, 2096,    0, 2094, 2104, 2104, 2105, 2105,
     2097, 2106, 2106, 2107, 2107, 2108, 2108, 2109, 2109, 2110,
     2110, 2111, 2111, 2099, 2112, 2112, 2102, 2113, 2113, 2101,
     2104, 2114, 2114, 2115, 2115, 2100,    0, 2116, 2116, 2110,

     2103, 2117, 2117, 2118, 2118, 2106, 2112, 2119, 2119, 2113,
        0, 2114, 2107, 2115, 2120, 2120, 2111, 2116, 2121, 2121,
     2122, 2122,    0, 2118, 2123, 2123, 2124, 2124, 2125, 2125,
        0, 2119, 2117, 2126, 2126, 2127, 2127,    0, 2121, 2128,
     2128, 2129, 2129,    0, 2123, 2130, 2130, 2131, 2131, 2132,
     2132,    0, 2122, 2120, 2133, 2133, 2126, 2134, 2134, 2135,
     2135, 2136, 2136, 2137, 2137, 2124,    0, 2128, 2127, 2138,
     2138, 2131, 2139, 2139, 2140, 2140,    0, 2130, 2141, 2141,
     2134, 2136, 2135, 2132,    0, 2133, 2142, 2142, 2143, 2143,
     2144, 2144, 2145, 2145, 2146, 2146, 2147, 2147, 2141, 2148,

     2148,    0, 2137, 2149, 2149, 2150, 2150, 2151, 2151, 2140,
     2152, 2152, 2153, 2153, 2154, 2154,    0, 2142, 2155, 2155,
     2156, 2156, 2157, 2157, 2158, 2158, 2159, 2159, 2146,    0,
     2151, 2160, 2160, 2152, 2149,    0, 2162, 2162, 2153,    0,
     2150, 2161, 2161, 2163, 2163, 2164, 2164, 2165, 2165, 2166,
     2166, 2154,    0, 2157,    0, 2156, 2162, 2158, 2160,    0,
     2159, 2167, 2167, 2161, 2168, 2168, 2169, 2169,    0, 2170,
     2170, 2172, 2172, 2164, 2171, 2171,    0, 2166, 2173, 2173,
        0, 2163, 2174, 2174, 2176, 2176, 2169, 2175, 2175, 2177,
     2177, 2178, 2178, 2179, 2179, 2180, 2180, 2181, 2181, 2183,

     2183, 2168, 2167, 2170,    0, 2171, 2185, 2185, 2174, 2182,
     2182, 2175, 2184, 2184, 2186, 2186,    0, 2187, 2187, 2189,
     2189, 2173, 2178,    0, 2181,    0, 2188, 2188, 2179, 2190,
     2190, 2182,    0, 2183, 2191, 2191, 2192, 2192,    0, 2184,
     2193, 2193, 2194, 2194,    0, 2185, 2188,    0,    0,    0,
        0,    0,    0, 2186, 2187,    0,    0,    0,    0,    0,
        0,    0,    0, 2190,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0, 2193, 2196, 2196,
     2196, 2196, 2196, 2196, 2196, 2196, 2198,    0,    0, 2198,
     2198, 2198, 2198, 2199, 2199, 2199, 2199, 2199, 2200, 2200,

     2200, 2200, 2201, 2201, 2201, 2202,    0, 2202, 2203,    0,
        0, 2203, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195, 2195,
     2195, 2195, 2195
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "NSFLexer.l"
#define INITIAL 0
#line 2 "NSFLexer.l"

// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
// 
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not
// be copied or disclosed except in accordance with the terms of that
// agreement.
// 
// Copyright (c) 1996-2008 Emergent Game Technologies.
// All Rights Reserved.
// 
// Emergent Game Technologies, Chapel Hill, North Carolina 27517
// http://www.emergent.net

// Disable generation of yyunput method to prevent unused function warnings
#define YY_NO_UNPUT 1

#if defined(WIN32) || defined(_XENON)
#pragma warning( disable : 4100 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4244 )
#pragma warning( disable : 4267 )
#endif

#if defined(_XENON)
    #include <xtl.h>
#elif defined (WIN32)
    #include <NiSystem.h>
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
#elif defined (_PS3)
    #include <NiSystem.h>
#endif  //#if defined(_XENON)
    #include <NiShaderFactory.h>
    #include "NSFTextFile.h"
    #include "NSFLexSymbol.h"

    extern int iErrors;
    extern YYSTYPE yylval;

    #define YY_SKIP_YYWRAP          1
    #define YY_ALWAYS_INTERACTIVE   1

    extern "C"
    {
        static int NSFParser_line_number=1;
        
        int yywrap() 
        {
            return 1;
        };
    }

    void skip0();
    void skip1();
    unsigned long HexConvert(char* buf);

    extern NSFTextFile* g_pkFile;
    
    void NSFParserResetLineNumber()
    {
        NSFParser_line_number = 1;
    }
    
    int NSFParserGetLineNumber()
    {
        return NSFParser_line_number;
    }
    
    void NSFParsererror(const char *s) 
    {
        iErrors++;
        char acErr[1024];
        NiSprintf(acErr, 1024, 
            "* ERROR: Invalid identifier \'%s\' at line %d (%s)\n",
            yytext, NSFParser_line_number, s);
        NILOG(acErr);
        if (g_pkFile)
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\nInvalid identifier \'%s\' at line %d (%s)\n",
                g_pkFile->GetFilename(), yytext, NSFParser_line_number, s);
        }
        else
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\nInvalid identifier \'%s\' at line %d (%s)\n",
                "*** Unknown File ***", yytext, NSFParser_line_number, s);
        }
    };

    void NSFParsererror2(const char *s) 
    {
        iErrors++;
        char acErr[1024];
        NiSprintf(acErr, 1024, 
             "* ERROR: %s at line %d\n",s,NSFParser_line_number);
        NILOG(acErr);
        NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
            "* ERROR: %s at line %d\n",s,NSFParser_line_number);
        if (g_pkFile)
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\n%s at line %d\n",
                g_pkFile->GetFilename(), s, NSFParser_line_number);
        }
        else
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\n%s at line %d\n",
                "*** Unknown File ***", s, NSFParser_line_number);
        }
    };

    // Make sure these defines match what's in NSBUtility.h
    #ifndef NSBSHADER_VERSION_MAJOR
    #define NSBSHADER_VERSION_MAJOR(_Version) (((_Version)>>8)&0xFF)
    #endif  //#ifndef NSBSHADER_VERSION_MAJOR

    #ifndef NSBSHADER_VERSION_MINOR
    #define NSBSHADER_VERSION_MINOR(_Version) (((_Version)>>0)&0xFF)
    #endif  //#ifndef NSBSHADER_VERSION_MINOR

    #ifndef NSBVS_VERSION
    #define NSBVS_VERSION(_Major,_Minor) (0xFFFE0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef NSBVS_VERSION

    #ifndef NSBGS_VERSION
    #define NSBGS_VERSION(_Major,_Minor) (0xFFFD0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef NSBGS_VERSION

    #ifndef NSBPS_VERSION
    #define NSBPS_VERSION(_Major,_Minor) (0xFFFF0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef NSBPS_VERSION
    
    #ifndef NSBCS_VERSION
    #define NSBCS_VERSION(_Major,_Minor) (0xFFFC0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef NSBCS_VERSION

    int my_yyinput (char * buf, int max_size);

    #undef YY_INPUT
    #define YY_INPUT(buf,result,max) (result = my_yyinput(buf,max))
    
    #define MAX_QUOTE_LENGTH    6 * 1024

//real            {integer}("."({digit}+))?{exponant}?
#line 2925 "..\\NSFLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 166 "NSFLexer.l"


#line 3079 "..\\NSFLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2196 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7513 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 168 "NSFLexer.l"
{ };
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 169 "NSFLexer.l"
{
                        NSFParserlval.ival=(int)atoi(yytext);
                        return N_INT;
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 173 "NSFLexer.l"
{ 
                        NSFParserlval.fval=(float)atof(yytext);
                        return N_FLOAT;
                    };
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 177 "NSFLexer.l"
{
                        NSFParserlval.dword=HexConvert(yytext);
                        return N_HEX;
                    };
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 182 "NSFLexer.l"
{
                        // Parse out the actual numbers
                        char acNum[32];
                        
                        // Skip the v
                        unsigned int uiIndex = 1;
                        unsigned int uiNumIndex = 0;
                        bool bFoundDot = false;
                        unsigned int uiMaj = 0;
                        unsigned int uiMin = 0;
                        
                        while (yytext[uiIndex] != 0)
                        {
                            bool bEndPack = false;
                            
                            if (yytext[uiIndex] != '.')
                                acNum[uiNumIndex++] = yytext[uiIndex];
                            else
                                bEndPack = true;
                            
                            if (yytext[uiIndex+1] == 0)
                                bEndPack = true;
                                
                            if (bEndPack)
                            {
                                acNum[uiNumIndex] = 0;
                                unsigned int uiNum = atoi(acNum);
                                
                                if (!bFoundDot)
                                    uiMaj = uiNum;
                                else
                                    uiMin = uiNum;
                                bFoundDot = true;
                                uiNumIndex = 0;
                            }
                            uiIndex++;
                        }
                        
                        NSFParserlval.vers = NSBVS_VERSION(uiMaj, uiMin);
                        
                        return N_VERSION;
                    };
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 225 "NSFLexer.l"
{   skip0();                };
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 226 "NSFLexer.l"
{   skip1();                };
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 228 "NSFLexer.l"
{   return L_ACCOLADE;      };
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 229 "NSFLexer.l"
{   return R_ACCOLADE;      };
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 231 "NSFLexer.l"
{   return L_PARENTHESE;    };
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 232 "NSFLexer.l"
{   return R_PARENTHESE;    };
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 234 "NSFLexer.l"
{   return L_BRACKET;       };
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 235 "NSFLexer.l"
{   return R_BRACKET;       };
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 237 "NSFLexer.l"
{   return L_ANGLEBRACKET;  };
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 238 "NSFLexer.l"
{   return R_ANGLEBRACKET;  };
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 240 "NSFLexer.l"
{   return OR;              };
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 242 "NSFLexer.l"
{   return ASSIGN;          };
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 243 "NSFLexer.l"
{   return COMMA;           };
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 245 "NSFLexer.l"
{   return UNDERSCORE;      };
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 247 "NSFLexer.l"
{   return ASTERIK;         };
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 248 "NSFLexer.l"
{   return FORWARDSLASH;    };
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 249 "NSFLexer.l"
{   return PLUS;            };
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 250 "NSFLexer.l"
{   return MINUS;           };
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 252 "NSFLexer.l"
{   return NSF_AT_SYMBOL;   };
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 253 "NSFLexer.l"
{   return NSF_SEMICOLON;   };
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 254 "NSFLexer.l"
{   return NSF_COLON;       };
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 256 "NSFLexer.l"
{   return NSFSHADER;       };
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 258 "NSFLexer.l"
{   return PACKINGDEF;      };
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 259 "NSFLexer.l"
{   return PD_STREAM;       };
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 260 "NSFLexer.l"
{   return PD_FIXEDFUNCTION;};
	YY_BREAK
/* Support for semantic adapter tables in NSF files */
case 31:
YY_RULE_SETUP
#line 263 "NSFLexer.l"
{ return SEMANTICADAPTERTABLE; }
	YY_BREAK
/* Based on D3DVSDE_ macros */
case 32:
YY_RULE_SETUP
#line 266 "NSFLexer.l"
{   return PDP_POSITION;    };
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 267 "NSFLexer.l"
{   return PDP_POSITION0;    };
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 268 "NSFLexer.l"
{   return PDP_POSITION1;    };
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 269 "NSFLexer.l"
{   return PDP_POSITION2;    };
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 270 "NSFLexer.l"
{   return PDP_POSITION3;    };
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 271 "NSFLexer.l"
{   return PDP_POSITION4;    };
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 272 "NSFLexer.l"
{   return PDP_POSITION5;    };
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 273 "NSFLexer.l"
{   return PDP_POSITION6;    };
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 274 "NSFLexer.l"
{   return PDP_POSITION7;    };
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 276 "NSFLexer.l"
{   return PDP_BLENDWEIGHTS;};
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 277 "NSFLexer.l"
{   return PDP_BLENDWEIGHTS;};
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 278 "NSFLexer.l"
{   return PDP_BLENDINDICES;};
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 279 "NSFLexer.l"
{   return PDP_NORMAL;      };
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 280 "NSFLexer.l"
{   return PDP_POINTSIZE;   };
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 281 "NSFLexer.l"
{   return PDP_POINTSIZE;   };
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 282 "NSFLexer.l"
{   return PDP_COLOR;       };
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 283 "NSFLexer.l"
{   return PDP_COLOR;       };
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 284 "NSFLexer.l"
{   return PDP_COLOR2;      };
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 285 "NSFLexer.l"
{   return PDP_COLOR2;      };
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 286 "NSFLexer.l"
{   return PDP_TEXCOORD0;   };
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 287 "NSFLexer.l"
{   return PDP_TEXCOORD1;   };
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 288 "NSFLexer.l"
{   return PDP_TEXCOORD2;   };
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 289 "NSFLexer.l"
{   return PDP_TEXCOORD3;   };
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 290 "NSFLexer.l"
{   return PDP_TEXCOORD4;   };
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 291 "NSFLexer.l"
{   return PDP_TEXCOORD5;   };
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 292 "NSFLexer.l"
{   return PDP_TEXCOORD6;   };
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 293 "NSFLexer.l"
{   return PDP_TEXCOORD7;   };
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 294 "NSFLexer.l"
{   return PDP_NORMAL2;     };
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 295 "NSFLexer.l"
{   return PDP_TANGENT;     };
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 296 "NSFLexer.l"
{   return PDP_BINORMAL;    };
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 297 "NSFLexer.l"
{   return PDP_EXTRADATA;   };
	YY_BREAK
/* Based on D3DVSDT_ macros and D3DDECLTYPE_ enumerations */
case 63:
YY_RULE_SETUP
#line 300 "NSFLexer.l"
{   return PDT_FLOAT1;      };
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 301 "NSFLexer.l"
{   return PDT_FLOAT2;      };
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 302 "NSFLexer.l"
{   return PDT_FLOAT3;      };
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 303 "NSFLexer.l"
{   return PDT_FLOAT4;      };
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 304 "NSFLexer.l"
{   return PDT_UBYTECOLOR;  };
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 305 "NSFLexer.l"
{   return PDT_UBYTECOLOR;  };
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 306 "NSFLexer.l"
{   return PDT_SHORT1;      };
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 307 "NSFLexer.l"
{   return PDT_SHORT2;      };
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 308 "NSFLexer.l"
{   return PDT_SHORT3;      };
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 309 "NSFLexer.l"
{   return PDT_SHORT4;      };
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 310 "NSFLexer.l"
{   return PDT_UBYTE4;      };
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 311 "NSFLexer.l"
{   return PDT_NORMSHORT1;  };
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 312 "NSFLexer.l"
{   return PDT_NORMSHORT1;  };
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 313 "NSFLexer.l"
{   return PDT_NORMSHORT2;  };
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 314 "NSFLexer.l"
{   return PDT_NORMSHORT2;  };
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 315 "NSFLexer.l"
{   return PDT_NORMSHORT3;  };
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 316 "NSFLexer.l"
{   return PDT_NORMSHORT3;  };
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 317 "NSFLexer.l"
{   return PDT_NORMSHORT4;  };
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 318 "NSFLexer.l"
{   return PDT_NORMSHORT4;  };
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 319 "NSFLexer.l"
{   return PDT_NORMPACKED3; };
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 320 "NSFLexer.l"
{   return PDT_NORMPACKED3; };
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 321 "NSFLexer.l"
{   return PDT_PBYTE1;      };
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 322 "NSFLexer.l"
{   return PDT_PBYTE2;      };
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 323 "NSFLexer.l"
{   return PDT_PBYTE3;      };
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 324 "NSFLexer.l"
{   return PDT_PBYTE4;      };
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 325 "NSFLexer.l"
{   return PDT_FLOAT2H;     };
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 326 "NSFLexer.l"
{   return PDT_NORMUBYTE4;  };
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 327 "NSFLexer.l"
{   return PDT_NORMUBYTE4;  };
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 328 "NSFLexer.l"
{   return PDT_NORMUSHORT2; };
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 329 "NSFLexer.l"
{   return PDT_NORMUSHORT2; };
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 330 "NSFLexer.l"
{   return PDT_NORMUSHORT4; };
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 331 "NSFLexer.l"
{   return PDT_NORMUSHORT4; };
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 332 "NSFLexer.l"
{   return PDT_UDEC3;       };
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 333 "NSFLexer.l"
{   return PDT_NORMDEC3;    };
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 334 "NSFLexer.l"
{   return PDT_NORMDEC3;    };
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 335 "NSFLexer.l"
{   return PDT_FLOAT16_2;   };
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 336 "NSFLexer.l"
{   return PDT_FLOAT16_4;   };
	YY_BREAK
/* Based on D3DDECLMETHOD_ enumerations */
case 100:
YY_RULE_SETUP
#line 339 "NSFLexer.l"
{   return PDTESS_DEFAULT;          };
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 340 "NSFLexer.l"
{   return PDTESS_PARTIALU;         };
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 341 "NSFLexer.l"
{   return PDTESS_PARTIALV;         };
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 342 "NSFLexer.l"
{   return PDTESS_CROSSUV;          };
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 343 "NSFLexer.l"
{   return PDTESS_UV;               };
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 344 "NSFLexer.l"
{   return PDTESS_LOOKUP;           };
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 345 "NSFLexer.l"
{   return PDTESS_LOOKUPPRESAMPLED; };
	YY_BREAK
/* Based on D3DDECLUSAGE_ enumerations */
case 107:
YY_RULE_SETUP
#line 348 "NSFLexer.l"
{   return PDU_POSITION;    };
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 349 "NSFLexer.l"
{   return PDU_BLENDWEIGHT; };
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 350 "NSFLexer.l"
{   return PDU_BLENDINDICES;};
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 351 "NSFLexer.l"
{   return PDU_NORMAL;      };
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 352 "NSFLexer.l"
{   return PDU_PSIZE;       };
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 353 "NSFLexer.l"
{   return PDU_TEXCOORD;    };
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 354 "NSFLexer.l"
{   return PDU_TANGENT;     };
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 355 "NSFLexer.l"
{   return PDU_BINORMAL;    };
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 356 "NSFLexer.l"
{   return PDU_TESSFACTOR;  };
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 357 "NSFLexer.l"
{   return PDU_POSITIONT;   };
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 358 "NSFLexer.l"
{   return PDU_COLOR;       };
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 359 "NSFLexer.l"
{   return PDU_FOG;         };
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 360 "NSFLexer.l"
{   return PDU_DEPTH;       };
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 361 "NSFLexer.l"
{   return PDU_SAMPLE;      };
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 363 "NSFLexer.l"
{   return ARTIST;          };
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 364 "NSFLexer.l"
{   return HIDDEN;          };
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 365 "NSFLexer.l"
{   return SAVE;            };
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 367 "NSFLexer.l"
{   return ATTRIBUTES;      };
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 368 "NSFLexer.l"
{   return GLOBALATTRIBUTES;};
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 369 "NSFLexer.l"
{   return ATTRIB;          };
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 370 "NSFLexer.l"
{   return ATTRIB_BOOL;     };
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 371 "NSFLexer.l"
{   return ATTRIB_STRING;   };
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 372 "NSFLexer.l"
{   return ATTRIB_UINT;     };
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 373 "NSFLexer.l"
{   return ATTRIB_FLOAT;    };
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 374 "NSFLexer.l"
{   return ATTRIB_POINT2;   };
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 375 "NSFLexer.l"
{   return ATTRIB_POINT3;   };
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 376 "NSFLexer.l"
{   return ATTRIB_POINT4;   };
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 377 "NSFLexer.l"
{   return ATTRIB_MATRIX3;  };
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 378 "NSFLexer.l"
{   return ATTRIB_TRANSFORM;};
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 379 "NSFLexer.l"
{   return ATTRIB_COLOR;    };
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 380 "NSFLexer.l"
{   return ATTRIB_TEXTURE;  };
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 382 "NSFLexer.l"
{   return OBJECTS;                     };
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 383 "NSFLexer.l"
{   return EFFECT_GENERALLIGHT;         };
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 384 "NSFLexer.l"
{   return EFFECT_POINTLIGHT;           };
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 385 "NSFLexer.l"
{   return EFFECT_DIRECTIONALLIGHT;     };
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 386 "NSFLexer.l"
{   return EFFECT_SPOTLIGHT;            };
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 387 "NSFLexer.l"
{   return EFFECT_SHADOWPOINTLIGHT;           };
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 388 "NSFLexer.l"
{   return EFFECT_SHADOWDIRECTIONALLIGHT;     };
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 389 "NSFLexer.l"
{   return EFFECT_SHADOWSPOTLIGHT;            };
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 390 "NSFLexer.l"
{   return EFFECT_ENVIRONMENTMAP;       };
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 391 "NSFLexer.l"
{   return EFFECT_PROJECTEDSHADOWMAP;   };
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 392 "NSFLexer.l"
{   return EFFECT_PROJECTEDLIGHTMAP;    };
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 393 "NSFLexer.l"
{   return EFFECT_FOGMAP;               };
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 395 "NSFLexer.l"
{   return USERDEFINEDDATA; };
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 396 "NSFLexer.l"
{   return IMPLEMENTATION;  };
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 397 "NSFLexer.l"
{   return OUTPUTSTREAM;    };
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 399 "NSFLexer.l"
{   return CLASSNAME;       };
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 401 "NSFLexer.l"
{   return PASS;            };
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 403 "NSFLexer.l"
{   return STAGE;           };
	YY_BREAK
/* Based on D3DTSS_ enumerations */
case 156:
YY_RULE_SETUP
#line 406 "NSFLexer.l"
{   return TSS_TEXTURE;                 };
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 407 "NSFLexer.l"
{   return TSS_COLOROP;                 };
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 408 "NSFLexer.l"
{   return TSS_COLORARG0;               };
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 409 "NSFLexer.l"
{   return TSS_COLORARG1;               };
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 410 "NSFLexer.l"
{   return TSS_COLORARG2;               };
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 411 "NSFLexer.l"
{   return TSS_ALPHAOP;                 };
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 412 "NSFLexer.l"
{   return TSS_ALPHAARG0;               };
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 413 "NSFLexer.l"
{   return TSS_ALPHAARG1;               };
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 414 "NSFLexer.l"
{   return TSS_ALPHAARG2;               };
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 415 "NSFLexer.l"
{   return TSS_RESULTARG;               };
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 416 "NSFLexer.l"
{   return TSS_CONSTANT_DEPRECATED;     };
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 417 "NSFLexer.l"
{   return TSS_BUMPENVMAT00;            };
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 418 "NSFLexer.l"
{   return TSS_BUMPENVMAT01;            };
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 419 "NSFLexer.l"
{   return TSS_BUMPENVMAT10;            };
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 420 "NSFLexer.l"
{   return TSS_BUMPENVMAT11;            };
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 421 "NSFLexer.l"
{   return TSS_BUMPENVLSCALE;           };
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 422 "NSFLexer.l"
{   return TSS_BUMPENVLOFFSET;          };
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 423 "NSFLexer.l"
{   return TSS_TEXCOORDINDEX;           };
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 424 "NSFLexer.l"
{   return TSS_TEXTURETRANSFORMFLAGS;   };
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 425 "NSFLexer.l"
{   return TSS_TEXTURETRANSFORMFLAGS;   };
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 426 "NSFLexer.l"
{   return TSS_TEXTRANSMATRIX;          };
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 427 "NSFLexer.l"
{   return TSS_TEXTRANSMATRIX;          };
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 429 "NSFLexer.l"
{   return TTFF_DISABLE;        };
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 430 "NSFLexer.l"
{   return TTFF_COUNT1;         };
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 431 "NSFLexer.l"
{   return TTFF_COUNT2;         };
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 432 "NSFLexer.l"
{   return TTFF_COUNT3;         };
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 433 "NSFLexer.l"
{   return TTFF_COUNT4;         };
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 434 "NSFLexer.l"
{   return TTFF_PROJECTED;      };
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 436 "NSFLexer.l"
{   return PROJECTED;           };
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 437 "NSFLexer.l"
{   return USEMAPINDEX;         };
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 438 "NSFLexer.l"
{   return USEMAPVALUE;         };
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 439 "NSFLexer.l"
{   return INVERSE;             };
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 440 "NSFLexer.l"
{   return TRANSPOSE;           };
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 442 "NSFLexer.l"
{   return TTSRC_GLOBAL;        };
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 443 "NSFLexer.l"
{   return TTSRC_CONSTANT;      };
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 445 "NSFLexer.l"
{   return TT_WORLD_PARALLEL;       };
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 446 "NSFLexer.l"
{   return TT_WORLD_PERSPECTIVE;    };
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 447 "NSFLexer.l"
{   return TT_WORLD_SPHERE_MAP;     };
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 448 "NSFLexer.l"
{   return TT_CAMERA_SPHERE_MAP;    };
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 449 "NSFLexer.l"
{   return TT_SPECULAR_CUBE_MAP;    };
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 450 "NSFLexer.l"
{   return TT_DIFFUSE_CUBE_MAP;     };
	YY_BREAK
/* Based on D3DTSS_TCI_ enumerations */
case 197:
YY_RULE_SETUP
#line 453 "NSFLexer.l"
{   return TCI_PASSTHRU;            };
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 454 "NSFLexer.l"
{   return TCI_CAMERASPACENORMAL;   };
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 455 "NSFLexer.l"
{   return TCI_CAMERASPACEPOSITION; };
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 456 "NSFLexer.l"
{   return TCI_CAMERASPACEREFLECT;  };
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 457 "NSFLexer.l"
{   return TCI_CAMERASPACEREFLECT;  };
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 458 "NSFLexer.l"
{   return TCI_SPHEREMAP;           };
	YY_BREAK
/* Based on D3DTOP_ enumerations */
case 203:
YY_RULE_SETUP
#line 461 "NSFLexer.l"
{   return TOP_DISABLE;                     };
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 462 "NSFLexer.l"
{   return TOP_SELECTARG1;                  };
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 463 "NSFLexer.l"
{   return TOP_SELECTARG2;                  };
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 464 "NSFLexer.l"
{   return TOP_MODULATE;                    };
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 465 "NSFLexer.l"
{   return TOP_MODULATE2X;                  };
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 466 "NSFLexer.l"
{   return TOP_MODULATE4X;                  };
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 467 "NSFLexer.l"
{   return TOP_ADD;                         };
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 468 "NSFLexer.l"
{   return TOP_ADDSIGNED;                   };
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 469 "NSFLexer.l"
{   return TOP_ADDSIGNED2X;                 };
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 470 "NSFLexer.l"
{   return TOP_SUBTRACT;                    };
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 471 "NSFLexer.l"
{   return TOP_ADDSMOOTH;                   };
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 472 "NSFLexer.l"
{   return TOP_BLENDDIFFUSEALPHA;           };
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 473 "NSFLexer.l"
{   return TOP_BLENDTEXTUREALPHA;           };
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 474 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 475 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 476 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 477 "NSFLexer.l"
{   return TOP_BLENDTEXTUREALPHAPM;         };
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 478 "NSFLexer.l"
{   return TOP_BLENDCURRENTALPHA;           };
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 479 "NSFLexer.l"
{   return TOP_PREMODULATE;                 };
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 480 "NSFLexer.l"
{   return TOP_MODULATEALPHA_ADDCOLOR;      };
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 481 "NSFLexer.l"
{   return TOP_MODULATECOLOR_ADDALPHA;      };
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 482 "NSFLexer.l"
{   return TOP_MODULATEINVALPHA_ADDCOLOR;   };
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 483 "NSFLexer.l"
{   return TOP_MODULATEINVCOLOR_ADDALPHA;   };
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 484 "NSFLexer.l"
{   return TOP_BUMPENVMAP;                  };
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 485 "NSFLexer.l"
{   return TOP_BUMPENVMAPLUMINANCE;         };
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 486 "NSFLexer.l"
{   return TOP_DOTPRODUCT3;                 };
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 487 "NSFLexer.l"
{   return TOP_MULTIPLYADD;                 };
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 488 "NSFLexer.l"
{   return TOP_LERP;                        };
	YY_BREAK
/* Based on D3DTA_ macros */
case 231:
YY_RULE_SETUP
#line 491 "NSFLexer.l"
{   return TA_CURRENT;                      };
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 492 "NSFLexer.l"
{   return TA_DIFFUSE;                      };
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 493 "NSFLexer.l"
{   return TA_SELECTMASK;                   };
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 494 "NSFLexer.l"
{   return TA_SPECULAR;                     };
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 495 "NSFLexer.l"
{   return TA_TEMP;                         };
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 496 "NSFLexer.l"
{   return TA_TEXTURE;                      };
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 497 "NSFLexer.l"
{   return TA_TFACTOR;                      };
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 498 "NSFLexer.l"
{   return TA_ALPHAREPLICATE;               };
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 499 "NSFLexer.l"
{   return TA_COMPLEMENT;                   };
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 501 "NSFLexer.l"
{   return NTM_BASE;    };
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 502 "NSFLexer.l"
{   return NTM_DARK;    };
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 503 "NSFLexer.l"
{   return NTM_DETAIL;  };
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 504 "NSFLexer.l"
{   return NTM_GLOSS;   };
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 505 "NSFLexer.l"
{   return NTM_GLOW;    };
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 506 "NSFLexer.l"
{   return NTM_BUMP;    };
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 507 "NSFLexer.l"
{   return NTM_DECAL;   };
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 508 "NSFLexer.l"
{   return NTM_NORMAL;   };
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 509 "NSFLexer.l"
{   return NTM_PARALLAX;   };
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 511 "NSFLexer.l"
{   return SAMPLER;             };
	YY_BREAK
/* Based on D3DSAMP_ enumerations */
case 250:
YY_RULE_SETUP
#line 514 "NSFLexer.l"
{   return TSAMP_ADDRESSU;                  };
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 515 "NSFLexer.l"
{   return TSAMP_ADDRESSV;                  };
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 516 "NSFLexer.l"
{   return TSAMP_ADDRESSW;                  };
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 517 "NSFLexer.l"
{   return TSAMP_BORDERCOLOR;               };
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 518 "NSFLexer.l"
{   return TSAMP_MAGFILTER;                 };
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 519 "NSFLexer.l"
{   return TSAMP_MINFILTER;                 };
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 520 "NSFLexer.l"
{   return TSAMP_MIPFILTER;                 };
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 521 "NSFLexer.l"
{   return TSAMP_MIPMAPLODBIAS;             };
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 522 "NSFLexer.l"
{   return TSAMP_MAXMIPLEVEL;               };
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 523 "NSFLexer.l"
{   return TSAMP_MAXANISOTROPY;             };
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 524 "NSFLexer.l"
{   return TSAMP_SRGBTEXTURE;               };
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 525 "NSFLexer.l"
{   return TSAMP_ELEMENTINDEX;              };
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 526 "NSFLexer.l"
{   return TSAMP_DMAPOFFSET;                };
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 527 "NSFLexer.l"
{   return TSAMP_ALPHAKILL_DEPRECATED;      };
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 528 "NSFLexer.l"
{   return TSAMP_COLORKEYOP_DEPRECATED;     };
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 529 "NSFLexer.l"
{   return TSAMP_COLORSIGN_DEPRECATED;      };
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 530 "NSFLexer.l"
{   return TSAMP_COLORKEYCOLOR_DEPRECATED;  };
	YY_BREAK
/* Based on D3DSAMP_ enumerations */
case 267:
YY_RULE_SETUP
#line 533 "NSFLexer.l"
{   return TADDR_WRAP;                      };
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 534 "NSFLexer.l"
{   return TADDR_MIRROR;                    };
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 535 "NSFLexer.l"
{   return TADDR_CLAMP;                     };
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 536 "NSFLexer.l"
{   return TADDR_BORDER;                    };
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 537 "NSFLexer.l"
{   return TADDR_MIRRORONCE;                };
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 538 "NSFLexer.l"
{   return TADDR_CLAMPTOEDGE_DEPRECATED;    };
	YY_BREAK
/* Based on D3DTEXF_ enumerations */
case 273:
YY_RULE_SETUP
#line 541 "NSFLexer.l"
{   return TEXF_NONE;                       };
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 542 "NSFLexer.l"
{   return TEXF_POINT;                      };
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 543 "NSFLexer.l"
{   return TEXF_LINEAR;                     };
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 544 "NSFLexer.l"
{   return TEXF_ANISOTROPIC;                };
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 545 "NSFLexer.l"
{   return TEXF_PYRAMIDALQUAD;              };
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 546 "NSFLexer.l"
{   return TEXF_GAUSSIANQUAD;               };
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 547 "NSFLexer.l"
{   return TEXF_QUINCUNX_DEPRECATED;        };
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 548 "NSFLexer.l"
{   return TEXF_FLATCUBIC_DEPRECATED;       };
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 549 "NSFLexer.l"
{   return TEXF_GAUSSIANCUBIC_DEPRECATED;   };
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 550 "NSFLexer.l"
{   return TEXF_MAX_DEPRECATED;             };
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 552 "NSFLexer.l"
{   return TAK_DISABLE_DEPRECATED;  };
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 553 "NSFLexer.l"
{   return TAK_ENABLE_DEPRECATED;   };
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 555 "NSFLexer.l"
{   return TCKOP_DISABLE_DEPRECATED;    };
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 556 "NSFLexer.l"
{   return TCKOP_ALPHA_DEPRECATED;      };
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 557 "NSFLexer.l"
{   return TCKOP_RGBA_DEPRECATED;       };
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 558 "NSFLexer.l"
{   return TCKOP_KILL_DEPRECATED;       };
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 560 "NSFLexer.l"
{   return TOKEN_TEXTURE;         };
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 562 "NSFLexer.l"
{   return TEXTURE_SOURCE; };
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 565 "NSFLexer.l"
{   return RENDERSTATES;    };
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 567 "NSFLexer.l"
{   return CMDEFINED;       };
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 568 "NSFLexer.l"
{   return CMATTRIBUTE;     };
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 569 "NSFLexer.l"
{   return CMCONSTANT;      };
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 570 "NSFLexer.l"
{   return CMGLOBAL;        };
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 571 "NSFLexer.l"
{   return CMOPERATOR;      };
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 572 "NSFLexer.l"
{   return CMOBJECT;        };
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 573 "NSFLexer.l"
{   return VSCONSTANTMAP;   };
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 574 "NSFLexer.l"
{   return GSCONSTANTMAP;   };
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 575 "NSFLexer.l"
{   return PSCONSTANTMAP;   };
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 576 "NSFLexer.l"
{   return CONSTANTMAP;     };
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 578 "NSFLexer.l"
{   return SKINBONEMATRIX3; };
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 580 "NSFLexer.l"
{   return SHADERPROGRAM;   };
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 581 "NSFLexer.l"
{   return SHADERTYPE;      };
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 583 "NSFLexer.l"
{   return VSPROGRAM;           };
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 584 "NSFLexer.l"
{   return GSPROGRAM;           };
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 585 "NSFLexer.l"
{   return PSPROGRAM;           };
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 586 "NSFLexer.l"
{   return PROGRAM;             };
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 587 "NSFLexer.l"
{   return ENTRYPOINT;          };
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 588 "NSFLexer.l"
{   return SHADERTARGET;        };
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 589 "NSFLexer.l"
{   return SOFTWAREVP;          };
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 590 "NSFLexer.l"
{   return THREADGROUPCOUNTS;   };
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 592 "NSFLexer.l"
{   return STREAMOUTPUT;        };
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 593 "NSFLexer.l"
{   return STREAMOUTTARGETS;    };
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 594 "NSFLexer.l"
{   return STREAMOUTAPPEND;     };
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 596 "NSFLexer.l"
{   return MAXVERTEXCOUNT;  };
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 597 "NSFLexer.l"
{   return OUTPUTPRIMTYPE;  };
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 598 "NSFLexer.l"
{   return _POINT;          };
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 599 "NSFLexer.l"
{   return _LINE;           };
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 600 "NSFLexer.l"
{   return _TRIANGLE;       };
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 601 "NSFLexer.l"
{   return VERTEXFORMAT;    };
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 602 "NSFLexer.l"
{   return FMT_FLOAT;       };
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 603 "NSFLexer.l"
{   return FMT_INT;         };
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 604 "NSFLexer.l"
{   return FMT_UINT;        };
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 606 "NSFLexer.l"
{   return REQUIREMENTS;            };
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 607 "NSFLexer.l"
{   return FEATURELEVEL;            };
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 608 "NSFLexer.l"
{   return VSVERSION;               };
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 609 "NSFLexer.l"
{   return GSVERSION;               };
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 610 "NSFLexer.l"
{   return PSVERSION;               };
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 611 "NSFLexer.l"
{   return CSVERSION;               };
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 612 "NSFLexer.l"
{   return USERVERSION;             };
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 613 "NSFLexer.l"
{   return PLATFORM;                };
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 614 "NSFLexer.l"
{   return BONESPERPARTITION;       };
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 615 "NSFLexer.l"
{   return BINORMALTANGENTMETHOD;   };
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 616 "NSFLexer.l"
{   return BINORMALTANGENTUVSOURCE;   };
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 617 "NSFLexer.l"
{   return NBTMETHOD_NONE;          };
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 618 "NSFLexer.l"
{   return NBTMETHOD_NI;            };
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 619 "NSFLexer.l"
{   return NBTMETHOD_MAX;           };
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 620 "NSFLexer.l"
{   return NBTMETHOD_ATI;           };
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 622 "NSFLexer.l"
{   
                        NSFParserlval.bval = true;      
                        return N_BOOL;
                    };
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 626 "NSFLexer.l"
{   
                        NSFParserlval.bval = false;
                        return N_BOOL;
                    };
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 631 "NSFLexer.l"
{   NSFParser_line_number++;          }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 632 "NSFLexer.l"
{}
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 634 "NSFLexer.l"
{
                        int iLength = (strlen(yytext));
                        NSFParserlval.sval = NiAlloc(char, iLength+1);
                        NiStrncpy(NSFParserlval.sval, iLength+1, yytext, 
                            iLength);
                        return N_STRING;
                    };
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 641 "NSFLexer.l"
{
                        int iLength = (strlen(yytext));
                        NSFParserlval.sval = NiAlloc(char, iLength+1);
                        NiStrncpy(NSFParserlval.sval, iLength+1, yytext, 
                            iLength);
                        return PATH;
                    };
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 649 "NSFLexer.l"
{
                        int iAllocSize;
                        int l = (strlen(yytext) - 2);
                        if (l > MAX_QUOTE_LENGTH)
                        {
                            EE_ASSERT(!"Quote too long!");
                            iAllocSize = l;
                        }
                        else
                        {
                            iAllocSize = MAX_QUOTE_LENGTH;
                        }
                        NSFParserlval.sval = NiAlloc(char, iAllocSize+1);
                        NiStrncpy(NSFParserlval.sval, l+1, &yytext[1], l);
                        return N_QUOTE;
                    }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 666 "NSFLexer.l"
{
                        NSFParsererror("Syntax Error");
                    }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 670 "NSFLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4999 "..\\NSFLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2196 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2196 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2195);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 670 "NSFLexer.l"


void skip0()
{
    char c;
    while (((c = g_pkFile->GetData()[g_pkFile->GetPos()++]) !='\n') && 
        (c != EOF));
    NSFParser_line_number++;
}

void skip1()
{
    char c0,c1;
    while (1)
    {
        c0 = g_pkFile->GetData()[g_pkFile->GetPos()++]; 
        if (c0==EOF)
        {
            NILOG("err: EOF in comment!\n");
            exit(-1);
        }

        if (c0 == '\n')
            NSFParser_line_number++;

        c1 = g_pkFile->GetData()[g_pkFile->GetPos()++];
        if (c1 == EOF)
        {
            NILOG("err: EOF in comment!\n");
            exit(-1);
        }

        if ((c0 == '*') && (c1 == '/'))
            break;  

        g_pkFile->GetPos()--;
    }
}

/*********************************************
  This routine is replaces the Flex 
  "internal" YY_INPUT macro
  that it uses to get input
*********************************************/

int my_yyinput (char * buf, int max_size)
{

    if (g_pkFile->GetSize() <= g_pkFile->GetPos()) 
        return YY_NULL;

    char c = g_pkFile->GetData()[g_pkFile->GetPos()++];
    
    if (c == EOF)
        return YY_NULL;

    buf[0] = c;
    buf[1] = 0;

    return 1;
}

unsigned long HexConvert(char* buf)
{
    if (!buf || (strcmp(buf, "") == 0))
        return 0;

    int iLen = strlen(buf);
    int iDigitVal = 1;
    int iValue = 0;
    
    // Skip the terminating 0
    iLen--;
    char* pchCurr = &buf[iLen];
    while ((*pchCurr != 'x') && (*pchCurr != 'X'))
    {
        if ((*pchCurr == 'a') || (*pchCurr == 'A'))
            iValue += iDigitVal * 10;
        else
        if ((*pchCurr == 'b') || (*pchCurr == 'B'))
            iValue += iDigitVal * 11;
        else
        if ((*pchCurr == 'c') || (*pchCurr == 'C'))
            iValue += iDigitVal * 12;
        else
        if ((*pchCurr == 'd') || (*pchCurr == 'D'))
            iValue += iDigitVal * 13;
        else
        if ((*pchCurr == 'e') || (*pchCurr == 'E'))
            iValue += iDigitVal * 14;
        else
        if ((*pchCurr == 'f') || (*pchCurr == 'F'))
            iValue += iDigitVal * 15;
        else
            iValue += iDigitVal * (*pchCurr - '0');
            
        iDigitVal *= 16;
        iLen--;
        pchCurr = &buf[iLen];
    }
    
    return iValue;
}

void NSFParserReset()
{
    YY_NEW_FILE;
} 

void NSFParserReleaseBuffer()
{
    yy_delete_buffer(yy_current_buffer);
}
    
