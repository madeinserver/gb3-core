; This tagger assigns logical id values to assets that are determined to be variations of the 
; same base asset. For example, variations of a graphical asset needed for different platforms
; or locales.

[LogicalIdTagger]
; The logical id's can be created as one-time hash values that are re-generatable and do not need
; to be persisted, or they can be created as GUID values that must be persisted.
PersistentIds = False
; When using hash value id's, you can optionally have them be generated in a case-sensitive manner.
; Disable this if you want your hash id's to NOT be case sensitive (recommended on Windows).
CaseSensitiveHashIds = False

; The Classes correspond to the different asset classifications. These are reflected in the sub-
; directory names where the assets are stored. Typically these tags will match the keys defined
; in the [DirectoryTagger.Classes] configuration. All classes listed here are stripped from the
; path name when computing the logical ID for an asset. For example, if a file is located in
; "some\path\Xbox360\foo.bar" its logical ID is computed as a hash value of "some\path\foo.bar".
; Another asset in "some\path\D3D11\foo.bar" would receive the same logical ID.
[LogicalIdTagger.Classes]
; add 2 classification tags for the console platforms
=PS3
=Xbox360
; add 3 classifications for Microsoft D3D versions
=DX9
=D3D10
=D3D11
; 1 additional classification for generic assets
=Generic

; The Assets are a list of asset types (assigned by the MimeTagger) that should have logical
; asset id's assigned to them. If the asset does not possess one of these tags, then no logical
; asset id is created for it.  Logical asset id's are only needed for assets that will be referenced
; by other asset files, like block or model files.
[LogicalIdTagger.Assets]
=gamebryo-scenegraph
=gamebryo-animation
=gamebryo-terrain
=gamebryo-terrain-sector
=gamebryo-terrain-materialpkg
=gamebryo-time-of-day
=gamebryo-actionmap
=wwise-sound-bank
=image
