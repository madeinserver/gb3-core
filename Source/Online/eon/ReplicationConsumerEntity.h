// EMERGENT GAME TECHNOLOGIES PROPRIETARY INFORMATION
//
// This software is supplied under the terms of a license agreement or
// nondisclosure agreement with Emergent Game Technologies and may not
// be copied or disclosed except in accordance with the terms of that
// agreement.
//
//      Copyright (c) 1996-2009 Emergent Game Technologies.
//      All Rights Reserved.
//
// Emergent Game Technologies, Calabasas, CA 91302
// http://www.emergent.net

#pragma once
#ifndef EE_REPLICATIONCONSUMERENTITY_H
#define EE_REPLICATIONCONSUMERENTITY_H

#include <eon/ReplicatingEntity.h>
#include <eon/EntityMessage.h>


namespace eon
{
// Forward declarations:
class ReplicationService;
class OnlineEntityManager;

/**
    Class used for replicated entities. These are created by the ReplicationService in
    response to entity discovery messages. They have extra members and methods related to
    keeping track of conditions like what category channels are in use and when the entity
    can be lost.
*/
class EE_EONENTRY ReplicationConsumerEntity : public ReplicatingEntity
{
    friend class eon::OnlineEntityManager;

    /// @cond EMERGENT_INTERNAL
    EE_DECLARE_CLASS1(
        ReplicationConsumerEntity,
        efd::kCLASSID_ReplicationConsumerEntity,
        ReplicatingEntity);
    /// @endcond

protected:
    // Only the factory method registered by the ReplicationService is allowed to create
    // this type of entity:
    friend class ReplicationService;

    /// Constructor
    ReplicationConsumerEntity(const egf::FlatModel* i_pTemplate, egf::EntityID i_eid);

    // Override of Entity::OnAdded used to launch OnDiscovery behavior, if present.
    virtual void OnAdded(efd::ParameterList* pDataStream);

    // Override of Entity::Destroy used to launch OnFinalLoss behavior, if present.
    virtual void Destroy();

    // Override of Entity::OnAssetsLoaded used to launch OnReplicaAssetsLoaded behavior, if present.
    virtual void OnAssetsLoaded();

public:
    /**
        Update entity properties from the EntityMessage data stream.  The replication group and
        sequence number in the stream will be used to ensure the data in the stream is up to date.
        This can be used for streams generated by GenerateDiscovery, GenerateUpdate, and
        GenerateFullUpdate.  Note that only the dynamic (changed) property values are actually
        input from the stream, leaving const values and those data properties that are
        unchanged from the model still pointing to the model default values.

        @param pEntityMessage A message containing the stream to read the entity from

        @return bool True if stream was successfully run
    */
    virtual bool UpdatePropertiesFromStream(const EntityMessage* pEntityMessage);

    /**
        Called when the current process is no longer consuming the given category that this entity
        was receiving replication updates on. We clear the category from any and all replication
        groups that were using that category.
    */
    virtual void RemoveReplicationGroupCategory(efd::Category oldCategory);

    /**
        Query if this entity is still consuming any replication categories. If this entity is no
        longer consuming any categories then the entity will be lost.
    */
    virtual bool ReplicationGroupsEmpty();

    /**
        Called when this entity received a discover or update message for a given replication group.
        We store the category on which that update arrived so that we can know to loose this entity
        should we unsubscribe to that category later.
    */
    virtual bool SetReplicationCategory(efd::UInt32 groupIndex, efd::Category cat);

    /**
        Determine if the given sequence number is greater than the last seen sequence number for
        the specified replication group.
    */
    inline bool IsCurrentSequence(efd::UInt32 groupIndex, efd::SequenceNumber32 sequence);

    /**
        Get the unique process ID of the process which owns the original copy of this entity. This
        value is set as soon as the first discovery message is applied to the entity, which is after
        async entity creation but before the discovery lifecycle.
    */
    efd::UInt32 GetOwningProcessID() const;

    /// Lifecycle values for use in _OnLifecycleEvent and related methods.
    enum RepConLifeCycles
    {
        /// Called after replica entity has been created. This is the consumer entity equivalent
        /// to lifecycle_OnCreate.
        lifecycle_OnDiscovery = ReplicatingEntity::MAX_REP_LIFECYCLE+1,

        /// Called when a replica entity finishes loading assets. This is the consumer entity
        /// equivalent to lifecycle_OnAssetsLoaded.
        lifecycle_OnReplicaAssetsLoaded,

        /// Called when a replica entity is being destroyed. This is the consumer entity equivalent
        /// to lifecycle_OnDestroy. It happens only when we leave our last replication group, not
        /// on every replication group loss we receive.
        lifecycle_OnFinalLoss,

        MAX_REPCON_LIFECYCLE
    };

    /**
        Behavior invocation requests are delivered here. We override this handler from
        the Entity class so that regular Events will be ignored by replicated entities.
        (We only want ViewEvent messages to be processed)

        @param[in] pMsg Pointer to the message that needs to be handled.
        @param[in] targetChannel Channel that the message arrived on.
    */
    virtual void HandleMessage(const egf::EventMessage *pMsg, efd::Category targetChannel);

protected:
    virtual const char* GetLifecycleName(efd::UInt32 lifecycle);
    virtual LifeCycles ProcessEndLifecycle(efd::UInt32 lifecycle);

    // These manage the incoming "last received" sequence numbers
    efd::SequenceNumber32 GetSequenceNumberFromMask(efd::UInt32 groupMask);
    efd::SequenceNumber32 GetSequenceNumberFromIndex(efd::UInt32 groupIndex);
    bool SetSequenceNumber(efd::UInt32 groupIndex, efd::SequenceNumber32 sequence);

    /// Sequence numbers for the last updates I have received for each replication group.
    efd::SequenceNumber32 m_sequences[32];

    /**
        A simple mask with one bit set for every replication group that is in use.  "In use"
        means that we have received a discover on that group index with no matching loss.
        This is only used by replicated entities, for owned entities the active groups can not
        dynamically change so you can get similar information by looking at
        GetModel()->GetReflectionGroups().
    */
    efd::UInt32 m_activeReplicationGroups;

    /// NetID of the process that owns the original copy of this entity
    efd::UInt32 m_owningProcess;
};

/// SmartPointer for the ReplicationConsumerEntity class
typedef efd::SmartPointer<ReplicationConsumerEntity> ReplicationConsumerEntityPtr;

} // end namespace eon

#include <eon/ReplicationConsumerEntity.inl>

#endif // EE_REPLICATIONCONSUMERENTITY_H
